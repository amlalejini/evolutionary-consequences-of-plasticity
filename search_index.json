[["index.html", "Supplemental Material Chapter 1 Introduction", " Supplemental Material Alexander Lalejini, Austin J. Ferguson, Nkrumah Grant, and Charles Ofria 2021-02-26 Chapter 1 Introduction Experimental design overview Fluctuating environment Static environment "],["validation-experiment.html", "Chapter 2 Validation experiment 2.1 Overview 2.2 Analysis dependencies 2.3 Setup 2.4 Evolution of phenotypic plasticity", " Chapter 2 Validation experiment In this experiment, we validate that (1) we observe the evolution of phenotypic plasticity in a changing environment when digital organisms have access to sensory instructions (capable of differentiating environmental states) and (2) that adaptive phenotypic plasticity does not evolve when populations lack access to sensory instructions. 2.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-01-07-validation/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis We evolved populations of digital organisms under four conditions: A fluctuating environment with access to sensory instructions A fluctuating environment without access to sensory instructions (i.e., sensory instructions are no-operations) A constant environment with access to sensory instructions A constant environment without access to sensory instructions In fluctuating environments, we alternate between rewarding and punishing different sets of computational tasks. In one environment, we reward tasks not, and, or and punish tasks nand, ornot, andnot. In the alternative environment, we reward tasks nand, ornot, andnot and punish tasks not, and, or. In constant environments, we reward all tasks (not, nand, and, ornot, or, andnot). For each replicate of each condition, we extract the dominant (i.e., most numerous) genotype at the end of the run to analyze further. We expect to observe the evolution of adaptive phenotypic plasticity in only the first experimental condition. In conditions without sensors, plasticity in any form should be unable to evolve. 2.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 0.4 ## year 2021 ## month 02 ## day 15 ## svn rev 80002 ## language R ## version.string R version 4.0.4 (2021-02-15) ## nickname Lost Library Book 2.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$DISABLE_REACTION_SENSORS &lt;- as.factor(data$DISABLE_REACTION_SENSORS) data$chg_env &lt;- as.factor(data$chg_env) data$dom_plastic_odd_even &lt;- as.factor(data$dom_plastic_odd_even) data$sensors &lt;- data$DISABLE_REACTION_SENSORS == &quot;0&quot; data$is_plastic &lt;- data$dom_plastic_odd_even == &quot;True&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # Count observed plasticity for each condition (I&#39;m sure there&#39;s a &#39;tidier&#39; way to do this..) observed_plasticity &lt;- data.frame( environment=character(), sensors=character(), plastic=integer(), nonplastic=integer(), plastic_adaptive=integer(), plastic_optimal=integer(), plastic_nonadaptive=integer() ) for (env_chg in levels(data$chg_env)) { for (disabled_sensors in levels(data$DISABLE_REACTION_SENSORS)) { cond_data &lt;- filter(data, chg_env == env_chg &amp; data$DISABLE_REACTION_SENSORS == disabled_sensors) environment_label &lt;- env_label_fun(env_chg) sensors_label &lt;- sensors_label_fun(disabled_sensors == &quot;0&quot;) observed_plasticity &lt;- observed_plasticity %&gt;% add_row( environment=environment_label, sensors=sensors_label, plastic=nrow(filter(cond_data, is_plastic==TRUE)), nonplastic=nrow(filter(cond_data, is_plastic==FALSE)), plastic_adaptive=nrow(filter(cond_data, dom_adaptive_plasticity==&quot;True&quot;)), plastic_optimal=nrow(filter(cond_data, dom_optimal_plastic==&quot;True&quot;)), plastic_nonadaptive=nrow(filter(cond_data, is_plastic==TRUE &amp; dom_adaptive_plasticity==&quot;False&quot;)) ) } } observed_plasticity &lt;- pivot_longer( observed_plasticity, cols=c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;, &quot;nonplastic&quot;), names_to=&quot;phenotype&quot;, values_to=&quot;phenotype_cnt&quot; ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 2.4 Evolution of phenotypic plasticity For each experimental condition, do we observe the evolution of phenotypic plasticity? To test for phenotypic plasticity, we culture digital organisms in both environments from the fluctuating condition (including organisms evolved in a constant environment). Any plasticity that we observe from digital organisms evolved under constant conditions is cryptic variation (as these organisms were never exposed to these culturing environments). ggplot(filter(observed_plasticity, phenotype %in% c(&quot;plastic&quot;, &quot;nonplastic&quot;)), aes(x=phenotype, y=phenotype_cnt, fill=phenotype)) + geom_bar( stat=&quot;identity&quot;, position=position_dodge(0.9) ) + geom_text( stat=&quot;identity&quot;, mapping=aes(label=phenotype_cnt), vjust=0.05 ) + scale_fill_brewer(palette=&quot;Accent&quot;) + scale_x_discrete( name=&quot;Phenotype&quot;, limits=c(&quot;plastic&quot;, &quot;nonplastic&quot;), labels=c(&quot;Plastic&quot;, &quot;Non-plastic&quot;) ) + facet_grid(sensors~environment) + theme( legend.position=&quot;none&quot; ) Indeed, we do not observe the evolution of phenotypic plasticity in any replicates in which digital organisms do not have access to sensory instructions. We do observe the evolution of plasticity (not necessarily adaptive plasticity) in both constant and fluctuating environments where sensors are enabled. To what extent is the observed phenotypic plasticity adaptive? ggplot(filter(observed_plasticity, environment==&quot;Fluctuating&quot; &amp; sensors == &quot;Sensors&quot; &amp; phenotype %in% c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;)), aes(x=phenotype, y=phenotype_cnt, fill=phenotype)) + geom_bar( stat=&quot;identity&quot;, position=position_dodge(0.9) ) + geom_text( stat=&quot;identity&quot;, mapping=aes(label=phenotype_cnt), vjust=0.05 ) + scale_fill_brewer(palette=&quot;Accent&quot;) + scale_x_discrete( name=&quot;Phenotype&quot;, limits=c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;), labels=c(&quot;Total plastic&quot;, &quot;Adaptive plasticity&quot;, &quot;Optimal plasticity&quot;, &quot;Non-adaptive plasticity&quot;) ) + facet_grid(sensors~environment) + theme( legend.position=&quot;none&quot; ) "],["evolutionary-change.html", "Chapter 3 Evolutionary change 3.1 Overview 3.2 Analysis dependencies 3.3 Setup 3.4 Evolution of phenotypic plasticity 3.5 Average generation 3.6 Selective sweeps 3.7 Phenotypic volatility along dominant lineage 3.8 Mutation accumulation along the dominant lineage 3.9 Depth of MRCA 3.10 Manuscript figures", " Chapter 3 Evolutionary change The effect of adaptive phenotypic plasticity on evolutionary change. 3.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-02-08-evo-dynamics/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis 3.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 0.4 ## year 2021 ## month 02 ## day 15 ## svn rev 80002 ## language R ## version.string R version 4.0.4 (2021-02-15) ## nickname Lost Library Book 3.3 Setup summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # note that this labeler makes assumptions about how we set up our experiment condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) 3.4 Evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase-two. summary_data_grouped = dplyr::group_by(summary_data, condition) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Number of replicates in phase two&quot;) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col( position=position_dodge(0.9) ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of plastic replicates&quot;) + ylim(0, 100) + theme( legend.position=&quot;none&quot; ) 3.5 Average generation ggplot(summary_data, aes(x=condition, y=time_average_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;average generation&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$time_average_generation) ) ## [1] &quot;PLASTIC median: 31697.65&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$time_average_generation) ) ## [1] &quot;STATIC median: 30839.75&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$time_average_generation) ) ## [1] &quot;NON-PLASTIC median: 41768.65&quot; kruskal.test( formula=time_average_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: time_average_generation by condition ## Kruskal-Wallis chi-squared = 177.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$time_average_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$time_average_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.004 ## ## P value adjustment method: bonferroni 3.6 Selective sweeps The number of times the most recent common ancestor changes gives us the number of selective sweeps that occur during the experiment. ggplot(summary_data, aes(x=condition, y=phylo_mrca_changes, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Number of selective sweeps&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;PLASTIC: 45.5&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;STATIC: 45&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;NON-PLASTIC: 663.5&quot; kruskal.test( formula=phylo_mrca_changes~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: phylo_mrca_changes by condition ## Kruskal-Wallis chi-squared = 175.46, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$phylo_mrca_changes, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$phylo_mrca_changes and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni 3.6.1 Average number of generations between selective sweeps summary_data$generations_per_mrca_change &lt;- summary_data$time_average_generation / summary_data$phylo_mrca_changes ggplot(summary_data, aes(x=condition, y=generations_per_mrca_change, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;PLASTIC: 685.001780758557&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;STATIC: 693.676265008576&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;NON-PLASTIC: 62.0184902295191&quot; kruskal.test( formula=generations_per_mrca_change~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: generations_per_mrca_change by condition ## Kruskal-Wallis chi-squared = 175.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$generations_per_mrca_change, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$generations_per_mrca_change and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni 3.7 Phenotypic volatility along dominant lineage ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_volatility, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;Phenotypic volatility (log scale)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0, 10, 100, 1000, 10000), limits=c(-1,10000) ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;PLASTIC: 2&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;STATIC: 0&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;NON-PLASTIC: 1868&quot; kruskal.test( formula=dominant_lineage_trait_volatility~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility by condition ## Kruskal-Wallis chi-squared = 190.78, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 8.7e-07 ## ## P value adjustment method: bonferroni 3.7.1 Phenotypic volatility normalized by generations elapsed summary_data$dominant_lineage_trait_volatility_per_generation &lt;- summary_data$dominant_lineage_trait_volatility / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_volatility_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility_per_generation) ) ## [1] &quot;PLASTIC: 6.33339279717772e-05&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility_per_generation) ) ## [1] &quot;STATIC: 0&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility_per_generation) ) ## [1] &quot;NON-PLASTIC: 0.0447440145638177&quot; kruskal.test( formula=dominant_lineage_trait_volatility_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility_per_generation by condition ## Kruskal-Wallis chi-squared = 189.62, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 4.2e-06 ## ## P value adjustment method: bonferroni 3.7.2 Phenotypic volatility normalized by lineage length Lineage length = number of genotypes along the lineage. summary_data$dominant_lineage_trait_volatility_per_lineage_step &lt;- summary_data$dominant_lineage_trait_volatility / summary_data$dominant_lineage_length_genotypes ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_volatility_per_lineage_step, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility_per_lineage_step) ) ## [1] &quot;PLASTIC: 0.00224688783339238&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility_per_lineage_step) ) ## [1] &quot;STATIC: 0&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility_per_lineage_step) ) ## [1] &quot;NON-PLASTIC: 0.437482522172625&quot; kruskal.test( formula=dominant_lineage_trait_volatility_per_lineage_step~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility_per_lineage_step by condition ## Kruskal-Wallis chi-squared = 191.23, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility_per_lineage_step, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility_per_lineage_step and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 2.3e-07 ## ## P value adjustment method: bonferroni 3.7.3 Phenotypic fidelity Frequency that an offsprings genotype is identical to a parent genotype (along the dominant lineage). summary_data$dominant_lineage_trait_fidelity &lt;- (summary_data$dominant_generation_born - summary_data$dominant_lineage_trait_volatility) / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_fidelity, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_fidelity) ) ## [1] &quot;PLASTIC: 0.999936666072028&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_fidelity) ) ## [1] &quot;STATIC: 1&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_fidelity) ) ## [1] &quot;NON-PLASTIC: 0.955255985436182&quot; kruskal.test( formula=dominant_lineage_trait_fidelity~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_fidelity by condition ## Kruskal-Wallis chi-squared = 189.62, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_fidelity, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_fidelity and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 4.2e-06 ## ## P value adjustment method: bonferroni 3.8 Mutation accumulation along the dominant lineage ggplot(summary_data, aes(x=condition, y=dominant_lineage_total_mut_cnt, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Mutation accumulation&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;PLASTIC: 998.5&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;STATIC: 1100&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;NON-PLASTIC: 4657.5&quot; kruskal.test( formula=dominant_lineage_total_mut_cnt~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_total_mut_cnt by condition ## Kruskal-Wallis chi-squared = 179.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_total_mut_cnt, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_total_mut_cnt and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.0019 ## ## P value adjustment method: bonferroni 3.8.1 Mutation accumulation normalized by generations elapsed summary_data$mutations_per_generation &lt;- summary_data$dominant_lineage_total_mut_cnt / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=mutations_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Mutation accumulation / generation&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$mutations_per_generation) ) ## [1] &quot;PLASTIC: 0.0319267181456982&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$mutations_per_generation) ) ## [1] &quot;STATIC: 0.0368157192941933&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$mutations_per_generation) ) ## [1] &quot;NON-PLASTIC: 0.112804526786948&quot; kruskal.test( formula=mutations_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: mutations_per_generation by condition ## Kruskal-Wallis chi-squared = 180.11, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$mutations_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$mutations_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 2e-04 ## ## P value adjustment method: bonferroni 3.8.2 Mutation accumulation normalized by lineage length summary_data$mutations_per_lineage_step &lt;- summary_data$dominant_lineage_total_mut_cnt / summary_data$dominant_lineage_length_genotypes ggplot(summary_data, aes(x=condition, y=mutations_per_lineage_step, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Mutation accumulation / lineage length&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$mutations_per_lineage_step) ) ## [1] &quot;PLASTIC: 1.0328599144651&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$mutations_per_lineage_step) ) ## [1] &quot;STATIC: 1.03794597464116&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$mutations_per_lineage_step) ) ## [1] &quot;NON-PLASTIC: 1.10048311715591&quot; kruskal.test( formula=mutations_per_lineage_step~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: mutations_per_lineage_step by condition ## Kruskal-Wallis chi-squared = 178.92, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$mutations_per_lineage_step, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$mutations_per_lineage_step and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.0034 ## ## P value adjustment method: bonferroni 3.8.3 Genotypic fidelity The frequency that an offsprings genotype is the same as a parents genotype. summary_data$dominant_lineage_genotypic_fidelity &lt;- (summary_data$dominant_generation_born - summary_data$dominant_lineage_num_mut_steps) / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_genotypic_fidelity, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_genotypic_fidelity) ) ## [1] &quot;PLASTIC: 0.969286906891951&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_genotypic_fidelity) ) ## [1] &quot;STATIC: 0.964620594632577&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_genotypic_fidelity) ) ## [1] &quot;NON-PLASTIC: 0.89754902563783&quot; kruskal.test( formula=dominant_lineage_genotypic_fidelity~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_genotypic_fidelity by condition ## Kruskal-Wallis chi-squared = 179.86, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_genotypic_fidelity, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_genotypic_fidelity and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 2e-04 ## ## P value adjustment method: bonferroni 3.8.4 Characterizing variation along lineages 3.8.4.1 How many mutation-steps along the lineage result in phenotypic changes? summary_data$frac_phenotype_changing_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype / summary_data$dominant_lineage_num_mut_steps ggplot(filter(summary_data, dominant_lineage_num_mut_steps &gt; 0), aes(x=frac_phenotype_changing_mut_steps)) + geom_density() + facet_wrap( ~condition, nrow=3, labeller=label_both ) + xlim(0, 1.0) + theme( legend.position=&quot;none&quot; ) ggplot(summary_data, aes(x=condition, y=frac_phenotype_changing_mut_steps, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$frac_phenotype_changing_mut_steps) ) ## [1] &quot;PLASTIC: 0.00224941742616098&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$frac_phenotype_changing_mut_steps) ) ## [1] &quot;STATIC: 0&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$frac_phenotype_changing_mut_steps) ) ## [1] &quot;NON-PLASTIC: 0.437583018324547&quot; kruskal.test( formula=frac_phenotype_changing_mut_steps~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: frac_phenotype_changing_mut_steps by condition ## Kruskal-Wallis chi-squared = 191.23, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$frac_phenotype_changing_mut_steps, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$frac_phenotype_changing_mut_steps and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 2.3e-07 ## ## P value adjustment method: bonferroni 3.8.4.2 For PLASTIC populations, what fraction of phenotype-altering mutations affect the unexpressed phenotype? summary_data$frac_unexpressed_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype / summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype summary_data$frac_expressed_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_expressed_phenotype / summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype ggplot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0), aes(x=frac_unexpressed_mut_steps)) + geom_density() + theme( legend.position=&quot;none&quot; ) print(paste0(&quot;PLASTIC - Mean with bootstrapped 95% CI&quot;)) ## [1] &quot;PLASTIC - Mean with bootstrapped 95% CI&quot; bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_mut_steps, statistic = samplemean, R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.8247126 0.0002307471 0.04031212 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.7443, 0.8994 ) ## Calculations and Intervals on Original Scale plastic_summary_data &lt;- filter(summary_data, condition==&quot;PLASTIC&quot;) aggregate_frac_mut_steps_that_change_unexpressed_phenotype &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype) sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) ## [1] 83 sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype) ## [1] 102 aggregate_frac_mut_steps_that_change_unexpressed_phenotype ## [1] 0.8137255 83 / 102 (0.8137255) 3.8.4.3 For PLASTIC populations, what fraction of mutations that affect the unexpressed phenotype are deleterious versus beneficial? aggregate_frac_unexpressed_deleterious_mut_steps &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_deleterious) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) aggregate_frac_unexpressed_beneficial_mut_steps &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_beneficial) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) Deleterious summary_data$frac_unexpressed_deleterious_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_deleterious / summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype ggplot( filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype &gt; 0), aes(x=frac_unexpressed_deleterious_mut_steps) ) + geom_density() + theme( legend.position=&quot;none&quot; ) bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_deleterious_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_deleterious_mut_steps, statistic = samplemean, ## R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.5172414 -0.0004375862 0.03948913 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.4391, 0.5931 ) ## Calculations and Intervals on Original Scale Beneficial summary_data$frac_unexpressed_beneficial_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_beneficial / summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype ggplot( filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype &gt; 0), aes(x=frac_unexpressed_beneficial_mut_steps) ) + geom_density() + theme( legend.position=&quot;none&quot; ) bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_beneficial_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_beneficial_mut_steps, statistic = samplemean, ## R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.4827586 0.0002521839 0.03983531 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.4046, 0.5609 ) ## Calculations and Intervals on Original Scale 3.9 Depth of MRCA ggplot(summary_data, aes(x=condition, y=phylo_mrca_depth, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;MRCA Depth&quot;) + theme( legend.position=&quot;none&quot; ) 3.10 Manuscript figures Figures styled for the paper. 3.10.1 Evolutionary change panel Selective sweeps, mutation accumulation, phenotypic volatility. Mutation accumulation: # dominant_lineage_total_mut_cnt or mutations_per_lineage_step? mutation_count_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_total_mut_cnt, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Mutations accumulated (log scale)&quot;, trans=&quot;log10&quot;, breaks=c(100, 1000, 10000), limits=c(100, 10000) ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;mutation-accumulation.pdf&quot;), width=5, height=4 ) mutation_count_fig Phenotypic volatility: phenotypic_volatility_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_trait_volatility, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Phenotypic volatility (log scale)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0, 10, 100, 1000, 10000), limits=c(-1,10000) ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;phenotypic-volatility.pdf&quot;), width=4, height=4 ) phenotypic_volatility_fig Selective sweeps: selective_sweeps_fig &lt;- ggplot( summary_data, aes(x=condition, y=phylo_mrca_changes, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Coalescence Events (log scale)&quot;, trans=&quot;log10&quot;, breaks=c(10, 100, 1000), limits=c(10, 1000) ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;selective-sweeps.pdf&quot;), width=4, height=4 ) selective_sweeps_fig All together: grid &lt;- plot_grid( selective_sweeps_fig + theme( legend.position=&quot;none&quot; ), mutation_count_fig + theme( legend.position=&quot;none&quot;, axis.ticks.y=element_blank(), axis.text.y=element_blank(), axis.title.y=element_blank() ), phenotypic_volatility_fig + theme( legend.position=&quot;none&quot;, axis.ticks.y=element_blank(), axis.text.y=element_blank(), axis.title.y=element_blank() ), nrow=1, align=&quot;v&quot;, labels=&quot;auto&quot; ) grid save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;evolutionary-dynamics.pdf&quot;), grid, base_height=6, base_asp=2.5 ) "],["evolution-and-maintenance-of-novel-traits.html", "Chapter 4 Evolution and maintenance of novel traits 4.1 Overview 4.2 Analysis dependencies 4.3 Setup 4.4 Evolution of phenotypic plasticity 4.5 Final dominant novel task performance 4.6 Final population novel task performance 4.7 Population-level novel tasks discovered 4.8 Novel tasks along lineage of final dominant genotype 4.9 Extra task performance over time 4.10 Manuscript figures", " Chapter 4 Evolution and maintenance of novel traits The effect of adaptive phenotypic plasticity on the evolution and maintenance of novel traits. 4.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 focal_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) extra_traits &lt;- c( &quot;nor&quot;,&quot;xor&quot;,&quot;equals&quot;, &quot;logic_3aa&quot;,&quot;logic_3ab&quot;,&quot;logic_3ac&quot;, &quot;logic_3ad&quot;,&quot;logic_3ae&quot;,&quot;logic_3af&quot;, &quot;logic_3ag&quot;,&quot;logic_3ah&quot;,&quot;logic_3ai&quot;, &quot;logic_3aj&quot;,&quot;logic_3ak&quot;,&quot;logic_3al&quot;, &quot;logic_3am&quot;,&quot;logic_3an&quot;,&quot;logic_3ao&quot;, &quot;logic_3ap&quot;,&quot;logic_3aq&quot;,&quot;logic_3ar&quot;, &quot;logic_3as&quot;,&quot;logic_3at&quot;,&quot;logic_3au&quot;, &quot;logic_3av&quot;,&quot;logic_3aw&quot;,&quot;logic_3ax&quot;, &quot;logic_3ay&quot;,&quot;logic_3az&quot;,&quot;logic_3ba&quot;, &quot;logic_3bb&quot;,&quot;logic_3bc&quot;,&quot;logic_3bd&quot;, &quot;logic_3be&quot;,&quot;logic_3bf&quot;,&quot;logic_3bg&quot;, &quot;logic_3bh&quot;,&quot;logic_3bi&quot;,&quot;logic_3bj&quot;, &quot;logic_3bk&quot;,&quot;logic_3bl&quot;,&quot;logic_3bm&quot;, &quot;logic_3bn&quot;,&quot;logic_3bo&quot;,&quot;logic_3bp&quot;, &quot;logic_3bq&quot;,&quot;logic_3br&quot;,&quot;logic_3bs&quot;, &quot;logic_3bt&quot;,&quot;logic_3bu&quot;,&quot;logic_3bv&quot;, &quot;logic_3bw&quot;,&quot;logic_3bx&quot;,&quot;logic_3by&quot;, &quot;logic_3bz&quot;,&quot;logic_3ca&quot;,&quot;logic_3cb&quot;, &quot;logic_3cc&quot;,&quot;logic_3cd&quot;,&quot;logic_3ce&quot;, &quot;logic_3cf&quot;,&quot;logic_3cg&quot;,&quot;logic_3ch&quot;, &quot;logic_3ci&quot;,&quot;logic_3cj&quot;,&quot;logic_3ck&quot;, &quot;logic_3cl&quot;,&quot;logic_3cm&quot;,&quot;logic_3cn&quot;, &quot;logic_3co&quot;,&quot;logic_3cp&quot; ) # Relative location of data. working_directory &lt;- &quot;experiments/2021-01-31-complex-features/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; 4.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 0.4 ## year 2021 ## month 02 ## day 15 ## svn rev 80002 ## language R ## version.string R version 4.0.4 (2021-02-15) ## nickname Lost Library Book 4.3 Setup ####### summary data ####### summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; summary_data$extra_task_value &lt;- as.factor(summary_data$extra_task_value) summary_data &lt;- filter(summary_data, extra_task_value == 0.1) env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) ###### time series ##### lineage_time_series_data_loc &lt;- paste0(working_directory, &quot;data/lineage_series.csv&quot;) lineage_time_series_data &lt;- read.csv(lineage_time_series_data_loc) lineage_time_series_data$DISABLE_REACTION_SENSORS &lt;- as.factor(lineage_time_series_data$DISABLE_REACTION_SENSORS) lineage_time_series_data$chg_env &lt;- lineage_time_series_data$chg_env == &quot;True&quot; lineage_time_series_data$sensors &lt;- lineage_time_series_data$DISABLE_REACTION_SENSORS == &quot;0&quot; lineage_time_series_data$extra_task_value &lt;- as.factor(lineage_time_series_data$extra_task_value) lineage_time_series_data$env_label &lt;- mapply( env_label_fun, lineage_time_series_data$chg_env ) lineage_time_series_data$sensors_label &lt;- mapply( sensors_label_fun, lineage_time_series_data$sensors ) lineage_time_series_data$condition &lt;- mapply( condition_label_fun, lineage_time_series_data$sensors, lineage_time_series_data$chg_env ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) 4.4 Evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase two. summary_data_grouped = dplyr::group_by(summary_data, sensors, env_label, condition, extra_task_value) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Number of replicates in phase two&quot;) + facet_wrap(~extra_task_value, labeller=label_both) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic, extra_task_value) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylim(0, 100) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of replicates with a plastic dominant genotype&quot;) + facet_wrap(~extra_task_value, labeller=label_both) + theme( legend.position=&quot;none&quot; ) 4.5 Final dominant novel task performance How many novel tasks do final dominant genotypes perform? ggplot(summary_data, aes(x=condition, y=dominant_extra_tasks, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Novel tasks performed by final dominant&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-extra-tasks.pdf&quot;), width=15, height=10 ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_extra_tasks) ) ## [1] &quot;PLASTIC median: 3&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_extra_tasks) ) ## [1] &quot;STATIC median: 3&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_extra_tasks) ) ## [1] &quot;NON-PLASTIC median: 0&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_extra_tasks~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_extra_tasks by condition ## Kruskal-Wallis chi-squared = 177.17, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=dom_task_data$dominant_extra_tasks, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_extra_tasks and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.9 ## ## P value adjustment method: bonferroni 4.6 Final population novel task performance How many novel tasks are performed across the final population (1% of organisms must perform to count)? ggplot(summary_data, aes(x=condition, y=final_pop_extra_tasks_0.01, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$final_pop_extra_tasks_0.01) ) ## [1] &quot;PLASTIC median: 3&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$final_pop_extra_tasks_0.01) ) ## [1] &quot;STATIC median: 4&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$final_pop_extra_tasks_0.01) ) ## [1] &quot;NON-PLASTIC median: 0&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=final_pop_extra_tasks_0.01~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: final_pop_extra_tasks_0.01 by condition ## Kruskal-Wallis chi-squared = 169.47, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=dom_task_data$final_pop_extra_tasks_0.01, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$final_pop_extra_tasks_0.01 and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 0.00016 ## ## P value adjustment method: bonferroni 4.7 Population-level novel tasks discovered ggplot(summary_data, aes(x=condition, y=discovered_extra_tasks_0.01, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$discovered_extra_tasks_0.01) ) ## [1] &quot;PLASTIC median: 8&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$discovered_extra_tasks_0.01) ) ## [1] &quot;STATIC median: 9&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$discovered_extra_tasks_0.01) ) ## [1] &quot;NON-PLASTIC median: 13&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=discovered_extra_tasks_0.01~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: discovered_extra_tasks_0.01 by condition ## Kruskal-Wallis chi-squared = 24.271, df = 2, p-value = 5.365e-06 pairwise.wilcox.test( x=dom_task_data$discovered_extra_tasks_0.01, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$discovered_extra_tasks_0.01 and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.4e-05 - ## STATIC 0.00035 1.00000 ## ## P value adjustment method: bonferroni 4.8 Novel tasks along lineage of final dominant genotype 4.8.1 Novel tasks discovered ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_discovered, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Extra tasks discovered along dominant lineage&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-tasks-discovered.pdf&quot;), width=15, height=10 ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_discovered) ) ## [1] &quot;PLASTIC median: 3.5&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_discovered) ) ## [1] &quot;STATIC median: 4&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_discovered) ) ## [1] &quot;NON-PLASTIC median: 6&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_discovered~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_discovered by condition ## Kruskal-Wallis chi-squared = 24.099, df = 2, p-value = 5.846e-06 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_discovered, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_discovered and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.7e-05 - ## STATIC 0.0035 0.0561 ## ## P value adjustment method: bonferroni 4.8.1.1 Novel traits discovered per step This isnt totally fair to non-plastic lineages because theyre continuously re-adapting, so they have more genotypes along lineage. summary_data$dominant_lineage_extra_traits_discovered_per_step &lt;- summary_data$dominant_lineage_extra_traits_discovered / summary_data$dominant_lineage_length_genotypes ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_discovered_per_step, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Lineage task discovery (per step)&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_step) ) ## [1] &quot;PLASTIC median: 0.00484428434398198&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_discovered_per_step) ) ## [1] &quot;STATIC median: 0.00480194844967106&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_step) ) ## [1] &quot;NON-PLASTIC median: 0.00139827576402932&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_discovered_per_step~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_discovered_per_step by condition ## Kruskal-Wallis chi-squared = 106.72, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_discovered_per_step, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_discovered_per_step and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 9.7e-11 - ## STATIC &lt; 2e-16 0.67 ## ## P value adjustment method: bonferroni 4.8.2 Novel tasks discovered per generation summary_data$dominant_lineage_extra_traits_discovered_per_generation &lt;- summary_data$dominant_lineage_extra_traits_discovered / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_discovered_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Lineage task discovery (per generation)&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ) ## [1] &quot;PLASTIC median: 0.000117695011124939&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ) ## [1] &quot;STATIC median: 0.00015363220504867&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ) ## [1] &quot;NON-PLASTIC median: 0.00014358046266055&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_discovered_per_generation~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_discovered_per_generation by condition ## Kruskal-Wallis chi-squared = 7.1465, df = 2, p-value = 0.02806 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_discovered_per_generation, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_discovered_per_generation and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.092 - ## STATIC 1.000 0.025 ## ## P value adjustment method: bonferroni 4.8.3 Novel tasks gained ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_gained, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Extra tasks gained along dominant lineage&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-tasks-gained.pdf&quot;), width=15, height=10 ) 4.8.4 Novel tasks lost ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_lost, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Extra tasks lost along dominant lineage&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-tasks-lost.pdf&quot;), width=15, height=10 ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ) ## [1] &quot;PLASTIC median: 2&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) ) ## [1] &quot;STATIC median: 5&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ) ## [1] &quot;NON-PLASTIC median: 87.5&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_lost~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_lost by condition ## Kruskal-Wallis chi-squared = 129.06, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_lost, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_lost and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.7e-16 - ## STATIC &lt; 2e-16 0.0024 ## ## P value adjustment method: bonferroni 4.8.4.1 Novel traits lost per step Again, not totally fair to non-plastic lineages. summary_data$dominant_lineage_extra_traits_lost_per_step &lt;- summary_data$dominant_lineage_extra_traits_lost / summary_data$dominant_lineage_length_genotypes ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_lost_per_step, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Extra tasks lost along dominant lineage (per step)&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_step) ) ## [1] &quot;PLASTIC median: 0.00238455242036334&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_per_step) ) ## [1] &quot;STATIC median: 0.00544747485837901&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_step) ) ## [1] &quot;NON-PLASTIC median: 0.0216427755153431&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_lost_per_step~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_lost_per_step by condition ## Kruskal-Wallis chi-squared = 65.779, df = 2, p-value = 5.204e-15 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_lost_per_step, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_lost_per_step and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.3e-10 - ## STATIC 1.7e-10 0.0092 ## ## P value adjustment method: bonferroni 4.8.4.2 Novel traits lost per generation summary_data$dominant_lineage_extra_traits_lost_per_generation &lt;- summary_data$dominant_lineage_extra_traits_lost / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_extra_traits_lost_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Extra tasks lost along dominant lineage (per generation)&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ) ## [1] &quot;PLASTIC median: 6.25141973661864e-05&quot; paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ) ## [1] &quot;STATIC median: 0.000161396283669756&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ) ## [1] &quot;NON-PLASTIC median: 0.0022026054610079&quot; reward_level &lt;- 0.1 dom_task_data &lt;- filter(summary_data, extra_task_value==reward_level) kruskal.test( formula=dominant_lineage_extra_traits_lost_per_generation~condition, data=dom_task_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_lost_per_generation by condition ## Kruskal-Wallis chi-squared = 121.41, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=dom_task_data$dominant_lineage_extra_traits_lost_per_generation, g=dom_task_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: dom_task_data$dominant_lineage_extra_traits_lost_per_generation and dom_task_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.1e-15 - ## STATIC &lt; 2e-16 0.0012 ## ## P value adjustment method: bonferroni 4.8.4.3 How many instances of novel trait loss co-occur with changes in base phenotype? Task loss linked with primary trait changes. lost_traits_summary_data &lt;- filter(summary_data, extra_task_value==0.1 &amp; dominant_lineage_extra_traits_lost&gt;0) lost_traits_summary_data$frac_linked_extra_trait_loss &lt;- lost_traits_summary_data$dominant_lineage_extra_traits_lost_linked_to_primary_change / lost_traits_summary_data$dominant_lineage_extra_traits_lost ggplot(lost_traits_summary_data, aes(x=frac_linked_extra_trait_loss)) + geom_density() + facet_grid( condition~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-tasks-lost-linkage.pdf&quot;), width=15, height=10 ) ggplot(lost_traits_summary_data, aes(x=condition, y=frac_linked_extra_trait_loss, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$frac_linked_extra_trait_loss) ) ## [1] &quot;PLASTIC median: 0.0192307692307692&quot; paste0( &quot;STATIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$frac_linked_extra_trait_loss) ) ## [1] &quot;STATIC median: 0&quot; paste0( &quot;NON-PLASTIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$frac_linked_extra_trait_loss) ) ## [1] &quot;NON-PLASTIC median: 0.983803278688525&quot; kruskal.test( formula=frac_linked_extra_trait_loss~condition, data=lost_traits_summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: frac_linked_extra_trait_loss by condition ## Kruskal-Wallis chi-squared = 153.68, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=lost_traits_summary_data$frac_linked_extra_trait_loss, g=lost_traits_summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: lost_traits_summary_data$frac_linked_extra_trait_loss and lost_traits_summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.9e-08 - ## STATIC &lt; 2e-16 1.8e-06 ## ## P value adjustment method: bonferroni sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 10998 sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 11229 aggregate_frac_linked_extra_trait_loss_nonplastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_nonplastic ## [1] 0.9794283 sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 29 sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 142 aggregate_frac_linked_extra_trait_loss_plastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_plastic ## [1] 0.2042254 sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 13 sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 631 aggregate_frac_linked_extra_trait_loss_nonplastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_nonplastic ## [1] 0.02060222 4.9 Extra task performance over time Match score over time lineage_reward10 &lt;- filter(lineage_time_series_data, extra_task_value==&quot;0.1&quot;) ggplot(filter(lineage_reward10, update&gt;198000 &amp; update&lt;=200000), aes(x=update, y=match_score_even, color=condition, fill=condition)) + stat_summary(fun=&quot;mean&quot;, geom=&quot;line&quot;) + stat_summary( fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), geom=&quot;ribbon&quot;, alpha=0.2, linetype=0 ) + ylab(&quot;Match score (even environment)&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-match-score-even-val10.png&quot;), width=15, height=10 ) Extra tasks over time ggplot(filter(lineage_reward10, update&gt;198000 &amp; update&lt;=200000), aes(x=update, y=extra_traits, color=condition, fill=condition)) + stat_summary(fun=&quot;mean&quot;, geom=&quot;line&quot;) + stat_summary( fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), geom=&quot;ribbon&quot;, alpha=0.2, linetype=0 ) + ylab(&quot;Number of extra traits&quot;) + facet_wrap( ~extra_task_value, labeller=label_both ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-traits-val10.png&quot;), width=15, height=10 ) 4.10 Manuscript figures Final dominant extra tasks. extra_task_reward_value=0.1 dominant_extra_tasks_fig &lt;- ggplot( filter(summary_data, extra_task_value==extra_task_reward_value), aes(x=condition, y=dominant_extra_tasks, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Final dominant novel traits&quot; ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) + coord_flip() dominant_extra_tasks_fig Final dominant lineage tasks discovered. lineage_extra_tasks_discovered_fig &lt;- ggplot( filter(summary_data, extra_task_value==extra_task_reward_value), aes(x=condition, y=dominant_lineage_extra_traits_discovered, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Novel traits discovered on lineage&quot; ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) + coord_flip() lineage_extra_tasks_discovered_fig Final dominant lineage tasks lost. lineage_extra_tasks_lost_fig &lt;- ggplot( filter(summary_data, extra_task_value==extra_task_reward_value), aes(x=condition, y=dominant_lineage_extra_traits_lost, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Novel traits lost on lineage (log scale)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0,10,100,1000), limits=c(-1,1000) ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) + coord_flip() lineage_extra_tasks_lost_fig Pull it all together. grid &lt;- plot_grid( dominant_extra_tasks_fig, lineage_extra_tasks_discovered_fig + theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),axis.title.y=element_blank()), lineage_extra_tasks_lost_fig + theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),axis.title.y=element_blank()), nrow=1, align=&quot;v&quot;, labels=&quot;auto&quot; ) save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;complex-traits-panel.pdf&quot;), grid, base_height=6, base_asp=2.5 ) grid "],["genetic-hitchhiking.html", "Chapter 5 Genetic hitchhiking 5.1 Overview 5.2 Analysis dependencies 5.3 Setup 5.4 Evolution of phenotypic plasticity 5.5 Hitchhiking instruction execution 5.6 Characterizing mutations that increase hitchhiker instruction execution 5.7 Manuscript figures", " Chapter 5 Genetic hitchhiking The effect of adaptive phenotypic plasticity on (deleterious) genetic hitchhiking. 5.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 focal_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-02-05-hitchhiking/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; 5.2 Analysis dependencies Load all required R libraries. library(RColorBrewer) library(ggplot2) library(tidyverse) library(cowplot) library(Hmisc) library(boot) library(fmsb) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 0.4 ## year 2021 ## month 02 ## day 15 ## svn rev 80002 ## language R ## version.string R version 4.0.4 (2021-02-15) ## nickname Lost Library Book 5.3 Setup ####### summary data ####### summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; summary_data$POISON_PENALTY &lt;- as.factor(summary_data$POISON_PENALTY) env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) ###### time series ##### lineage_time_series_data_loc &lt;- paste0(working_directory, &quot;data/lineage_series.csv&quot;) lineage_time_series_data &lt;- read.csv(lineage_time_series_data_loc) lineage_time_series_data$DISABLE_REACTION_SENSORS &lt;- as.factor(lineage_time_series_data$DISABLE_REACTION_SENSORS) lineage_time_series_data$chg_env &lt;- lineage_time_series_data$chg_env == &quot;True&quot; lineage_time_series_data$sensors &lt;- lineage_time_series_data$DISABLE_REACTION_SENSORS == &quot;0&quot; lineage_time_series_data$POISON_PENALTY &lt;- as.factor(lineage_time_series_data$POISON_VALUE) lineage_time_series_data$env_label &lt;- mapply( env_label_fun, lineage_time_series_data$chg_env ) lineage_time_series_data$sensors_label &lt;- mapply( sensors_label_fun, lineage_time_series_data$sensors ) lineage_time_series_data$condition &lt;- mapply( condition_label_fun, lineage_time_series_data$sensors, lineage_time_series_data$chg_env ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) 5.4 Evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase-two. summary_data_grouped = dplyr::group_by(summary_data, sensors, env_label, condition, POISON_PENALTY) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Number of replicates in phase two&quot;) + facet_wrap(~POISON_PENALTY, labeller=label_both) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic, POISON_PENALTY) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ## `summarise()` has grouped output by &#39;condition&#39;, &#39;is_plastic&#39;. You can override using the `.groups` argument. ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of replicates with a plastic dominant genotype&quot;) + ylim(0, 100) + facet_wrap(~POISON_PENALTY, labeller=label_both) + theme( legend.position=&quot;none&quot; ) 5.5 Hitchhiking instruction execution 5.5.1 Number of replicates where final dominant genotype executes hitchhiker instruction hitchiker_penalty &lt;- 0.1 occurrences &lt;- c( length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;STATIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED) ) trials &lt;- c( length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;STATIC&quot; )$RANDOM_SEED) ) names(trials) &lt;- c( &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot;, &quot;STATIC&quot; ) names(occurrences) &lt;- c( &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot;, &quot;STATIC&quot; ) pairwise.fisher.test(x=occurrences, n=trials, p.adjust.method=&quot;bonferroni&quot;) ## ## Pairwise comparisons using Pairwise comparison of proportions (Fisher) ## ## data: occurrences out of trials ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.03212 - ## STATIC 0.00022 1.00000 ## ## P value adjustment method: bonferroni 5.5.2 Final dominant genotype hitchhiker execution ggplot(summary_data, aes(x=condition, y=dominant_times_poison_executed, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;poison instruction executions (final dominant)&quot;) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scale=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-poison.pdf&quot;), width=15, height=10 ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_times_poison_executed~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_times_poison_executed, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 36.988, df = 2, p-value = 9.294e-09 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.8e-07 - ## STATIC 0.00015 0.00198 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 72.995, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.0e-06 - ## STATIC 2.8e-13 1 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 21.157, df = 2, p-value = 2.546e-05 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.02034 - ## STATIC 0.00022 - ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_times_poison_executed by condition ## Kruskal-Wallis chi-squared = NaN, df = 2, p-value = NA 5.5.3 Hitchhiker instruction execution in final population ggplot(summary_data, aes(x=condition, y=final_population_poison, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;poison instruction executions (final population)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0,10,100,1000, 10000, 100000, 1000000), limits=c(-1,1000000) ) + facet_wrap( ~POISON_PENALTY, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-population-poison-log.pdf&quot;), width=15, height=10 ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=final_population_poison~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$final_population_poison, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 43.589, df = 2, p-value = 3.426e-10 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 8.7e-07 - ## STATIC 9.8e-07 0.00074 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 20.74, df = 2, p-value = 3.136e-05 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.003 - ## STATIC 1e-04 1.000 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 20.608, df = 2, p-value = 3.35e-05 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.0093 - ## STATIC 4.9e-05 1.0000 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 3.3994, df = 2, p-value = 0.1827 5.5.4 Hitchhiker instruction execution along final dominant lineage (cummulative) ggplot(summary_data, aes(x=condition, y=dominant_lineage_times_poison_executed, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;poison instruction executions (dominant lineage)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0,10,100,1000,10000,100000), limits=c(-1,100000) ) + facet_wrap( ~POISON_PENALTY, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-dominant-lineage-poison-log.pdf&quot;), width=15, height=10 ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_times_poison_executed~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_times_poison_executed, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 178.84, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.0018 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 178.62, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.011 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 184.83, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.21 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 149.48, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 4.4e-16 - ## STATIC &lt; 2e-16 0.84 ## ## P value adjustment method: bonferroni 5.6 Characterizing mutations that increase hitchhiker instruction execution 5.6.1 Number of offspring along dominant lineage with increase in hitchiker instruction execution ggplot(summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-dominant-lineage-poison-increase-num-mutants-log.pdf&quot;), width=15, height=10 ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_num_times_hitchhike_inst_exec_increases~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 179.79, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 0.00046 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 179.35, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.03 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 185.34, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.27 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 146.35, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 7.8e-16 - ## STATIC &lt; 2e-16 0.86 ## ## P value adjustment method: bonferroni sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) ## [1] 1916 sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) ## [1] 18 sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) ## [1] 58 # sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_trait_volatility) # sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_trait_volatility) # sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_trait_volatility) 5.6.1.1 Normalized by generations summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 180.05, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 7.8e-05 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 176.25, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.019 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 184.17, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.2 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 140.99, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.2e-15 - ## STATIC &lt; 2e-16 0.79 ## ## P value adjustment method: bonferroni 5.6.2 What fraction of mutations that increase hitchhiker instruction execution co-occur with base trait changes? # Fraction of unexpressed vs expressed increases in hitchhiker instructions summary_data$frac_hitchhiking_linked_trait_change &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 ), aes(x=frac_hitchhiking_linked_trait_change)) + geom_density() + facet_grid( condition~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-frac_hitchhiking_linked_trait_change.pdf&quot;), width=15, height=10 ) ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 ), aes(x=condition, y=frac_hitchhiking_linked_trait_change, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) penalties &lt;- levels(summary_data$POISON_PENALTY) for (penalty in penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty &amp; dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=frac_hitchhiking_linked_trait_change~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$frac_hitchhiking_linked_trait_change, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot;, exact=FALSE ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 211.29, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.031 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 186.88, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.9e-16 - ## STATIC &lt; 2e-16 - ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 113.72, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 3.3e-08 - ## STATIC &lt; 2e-16 - ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 34.791, df = 2, p-value = 2.788e-08 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.26 - ## STATIC 2.4e-08 0.18 ## ## P value adjustment method: bonferroni denom &lt;- sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;NON-PLASTIC: &quot;, num/denom, &quot;(&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;NON-PLASTIC: 0.498956158663883(956/1916)&quot; denom &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;PLASTIC: &quot;, num/denom, &quot; (&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;PLASTIC: 0 (0/18)&quot; denom &lt;- sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;STATIC: &quot;, num/denom, &quot; (&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;STATIC: 0 (0/58)&quot; 5.6.3 What about unexpressed vs expressed trait changes in plastic populations? summary_data$frac_unexpressed_hitchhiker_inc &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_in_unexpressed_phenotype / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases summary_data$frac_expressed_hitchiker_inc &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_in_expressed_phenotype / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 &amp; condition==&quot;PLASTIC&quot;), aes(x=frac_unexpressed_hitchhiker_inc)) + geom_density() + facet_grid( condition~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) # ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 &amp; condition==&quot;PLASTIC&quot;), aes(x=frac_expressed_hitchiker_inc)) + # geom_density() + # facet_grid( # condition~POISON_PENALTY, # labeller=label_both, # scales=&quot;free_y&quot; # ) + # theme( # legend.position=&quot;none&quot; # ) 5.7 Manuscript figures hitchiker_penalty &lt;- 0.1 ggplot(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0), aes(x=condition, fill=condition) ) + geom_bar() + geom_text( stat=&quot;count&quot;, mapping=aes(label=..count..), position=position_dodge(0.9), vjust=0 ) + scale_y_continuous( name=&quot;Number of replicates where poison is executed by dominant genotype&quot;, limits=c(0, replicates+2) ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order, breaks=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) fig_data &lt;- data.frame( num_execute_poison=c( length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;STATIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED) ), num_execute_no_poison=c( length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot; &amp; dominant_times_poison_executed == 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;PLASTIC&quot; &amp; dominant_times_poison_executed == 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;STATIC&quot; &amp; dominant_times_poison_executed == 0)$RANDOM_SEED) ), total=c( length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;NON-PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==hitchiker_penalty &amp; condition==&quot;STATIC&quot; )$RANDOM_SEED) ), condition=c( &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot;, &quot;STATIC&quot; ) ) ggplot(fig_data, aes(x=condition, y=num_execute_poison, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=num_execute_poison, y=num_execute_poison+0.25)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) Number of poison increases along lineage. poison_increases_fig &lt;- ggplot( filter(summary_data, POISON_PENALTY==hitchiker_penalty), aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Increases in poison instruction execution along lineage&quot;, ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) + coord_flip() poison_increases_fig poison_increases_per_gen_fig &lt;- ggplot( filter(summary_data, POISON_PENALTY==hitchiker_penalty), aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Increases in poison instruction execution along lineage (per generation)&quot;, ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + theme( legend.position=&quot;none&quot; ) + coord_flip() poison_increases_per_gen_fig Pull it all together. # grid &lt;- plot_grid( # dominant_extra_tasks_fig, # lineage_extra_tasks_discovered_fig + theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),axis.title.y=element_blank()), # lineage_extra_tasks_lost_fig + theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),axis.title.y=element_blank()), # nrow=1, # align=&quot;v&quot;, # labels=&quot;auto&quot; # ) # save_plot( # paste0(working_directory, &quot;plots/&quot;, &quot;complex-traits-panel.pdf&quot;), # grid, # base_height=6, # base_asp=2.5 # ) # grid "],["references.html", "References", " References "]]
