[["index.html", "Supplemental Material for Adaptive phenotypic plasticity stabilizes evolution in fluctuating environments Chapter 1 Introduction 1.1 About our supplemental material 1.2 Contributing authors 1.3 Research overview", " Supplemental Material for Adaptive phenotypic plasticity stabilizes evolution in fluctuating environments Alexander Lalejini, Austin J. Ferguson, Nkrumah A. Grant, and Charles Ofria 2021-05-22 Chapter 1 Introduction This is the supplemental material for our work entitled, Adaptive phenotypic plasticity stabilizes evolution in fluctuating environments. Preprint forthcoming. 1.1 About our supplemental material This supplemental material is hosted on GitHub using GitHub pages. The source code and configuration files used to generate this supplemental material can be found in this GitHub repository. We compiled our data analyses and supplemental documentation into this nifty web-accessible book using bookdown. Our supplemental material includes the following: Data availability (Section 2) Guide for running our experiments (Section 3) Experiment analyses (including source code): Validating the evolution of phenotypic plasticity (Section TODO) Effect of adaptive phenotypic plasticity on evolutionary change (Section TODO) Results with variable-length genomes (Section TODO) Effect of adaptive phenotypic plasticity on the evolution and maintenance of novel traits (Section TODO) Effect of adaptive phenotypic plasticity on the accumulation of deleterious instructions (Section TODO) Exploring how regulation is encoded in genomes in Avida (Section TODO) 1.2 Contributing authors Alexander Lalejini Austin J. Ferguson Nkrumah A. Grant Charles Ofria 1.3 Research overview Abstract: &gt; Fluctuating environmental conditions are ubiquitous in natural systems, and populations have evolved various strategies to cope with such fluctuations. The particular mechanisms that evolve profoundly influence subsequent evolutionary dynamics. One such mechanism is phenotypic plasticity, which is the ability of a single genotype to produce alternate phenotypes in an environmentally dependent context. Here, we use digital organisms (self-replicating computer programs) to investigate how adaptive phenotypic plasticity alters evolutionary dynamics and influences evolutionary outcomes in cyclically changing environments. Specifically, we examined the evolutionary histories of both plastic populations and non-plastic populations to ask: (1) Does adaptive plasticity promote or constrain evolutionary change? (2) Are plastic populations better able to evolve and then maintain novel traits? And (3), how does adaptive plasticity affect the potential for maladaptive traits to accumulate in evolving genomes? We find that populations with adaptive phenotypic plasticity undergo less evolutionary change than non-plastic populations, which must rely on genetic variation from de novo mutations to continuously readapt to environmental fluctuations. Indeed, the non-plastic populations undergo more frequent selective sweeps and accumulate many more genetic changes. We find that the repeated selected sweeps in non-plastic populations drive the loss of beneficial traits via deleterious hitchhiking, whereas phenotypic plasticity can stabilize populations against environmental fluctuations. This stabilization allows plastic populations to more easily retain novel adaptive traits than their non-plastic counterparts. In general, the evolution of adaptive phenotypic plasticity shifted evolutionary dynamics to be more similar to that of populations evolving in a static environment than to non-plastic populations evolving in an identical fluctuating environment. All natural environments subject populations to some form of change; our findings suggest that the stabilizing effect of phenotypic plasticity plays an important role in subsequent adaptive evolution. "],["data-availability.html", "Chapter 2 Data availability 2.1 Source code 2.2 Experimental results", " Chapter 2 Data availability 2.1 Source code The source code for this work is publicly accessible on GitHub: https://github.com/amlalejini/evolutionary-consequences-of-plasticity 2.2 Experimental results The data from our experiments are available online in our OSF repository (Lalejini and Ferguson 2021) at https://osf.io/sav2c/. References "],["compile-and-run-experiments-locally.html", "Chapter 3 Compile and run experiments locally 3.1 Docker", " Chapter 3 Compile and run experiments locally Here, we provide a brief guide to compiling and running our experiments using our Docker image. Please file an issue on GitHub if something is unclear or does not work. 3.1 Docker You can use the Dockerfile in our repository to build a docker image locally, or you can pull the latest docker image from DockerHub using docker pull amlalejini/evolutionary-consequences-of-plasticity This will pull down a docker image with: all of the requisite dependencies installed/downloaded all experiment source code the minimal set of raw data needed to compile the supplemental material a build of our supplemental material (which will also run all of our analyses) To run the container interactively: docker run -it --entrypoint bash amlalejini/evolutionary-consequences-of-plasticity You can exit the container at any point with ctrl-d. Inside the container, you should be able to navigate to /opt/evolutionary-consequences-of-plasticity: cd /opt/evolutionary-consequences-of-plasticity To run Avida, youll need to cd into the avida directory and run ./build_avida. All of the Avida configuration files necessary for re-running our experiments can be found here: https://github.com/amlalejini/evolutionary-consequences-of-plasticity/tree/master/experiments. For example, the configuration files for our evolutionary change experiment are here: https://github.com/amlalejini/evolutionary-consequences-of-plasticity/tree/master/experiments/2021-02-08-evo-dynamics/hpcc/config. "],["validation-experiment.html", "Chapter 4 Validation experiment 4.1 Overview 4.2 Analysis dependencies 4.3 Setup 4.4 Evolution of phenotypic plasticity", " Chapter 4 Validation experiment In this experiment, we validate that (1) we observe the evolution of phenotypic plasticity in a changing environment when digital organisms have access to sensory instructions (capable of differentiating environmental states) and (2) that adaptive phenotypic plasticity does not evolve when populations lack access to sensory instructions. 4.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-01-07-validation/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis We evolved populations of digital organisms under four conditions: A fluctuating environment with access to sensory instructions A fluctuating environment without access to sensory instructions (i.e., sensory instructions are no-operations) A constant environment with access to sensory instructions A constant environment without access to sensory instructions In fluctuating environments, we alternate between rewarding and punishing different sets of computational tasks. In one environment, we reward tasks not, and, or and punish tasks nand, ornot, andnot. In the alternative environment, we reward tasks nand, ornot, andnot and punish tasks not, and, or. In constant environments, we reward all tasks (not, nand, and, ornot, or, andnot). For each replicate of each condition, we extract the dominant (i.e., most numerous) genotype at the end of the run to analyze further. We expect to observe the evolution of adaptive phenotypic plasticity in only the first experimental condition. In conditions without sensors, plasticity in any form should be unable to evolve. 4.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 4.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$DISABLE_REACTION_SENSORS &lt;- as.factor(data$DISABLE_REACTION_SENSORS) data$chg_env &lt;- as.factor(data$chg_env) data$dom_plastic_odd_even &lt;- as.factor(data$dom_plastic_odd_even) data$sensors &lt;- data$DISABLE_REACTION_SENSORS == &quot;0&quot; data$is_plastic &lt;- data$dom_plastic_odd_even == &quot;True&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # Count observed plasticity for each condition (I&#39;m sure there&#39;s a &#39;tidier&#39; way to do this..) observed_plasticity &lt;- data.frame( environment=character(), sensors=character(), plastic=integer(), nonplastic=integer(), plastic_adaptive=integer(), plastic_optimal=integer(), plastic_nonadaptive=integer() ) for (env_chg in levels(data$chg_env)) { for (disabled_sensors in levels(data$DISABLE_REACTION_SENSORS)) { cond_data &lt;- filter(data, chg_env == env_chg &amp; data$DISABLE_REACTION_SENSORS == disabled_sensors) environment_label &lt;- env_label_fun(env_chg) sensors_label &lt;- sensors_label_fun(disabled_sensors == &quot;0&quot;) observed_plasticity &lt;- observed_plasticity %&gt;% add_row( environment=environment_label, sensors=sensors_label, plastic=nrow(filter(cond_data, is_plastic==TRUE)), nonplastic=nrow(filter(cond_data, is_plastic==FALSE)), plastic_adaptive=nrow(filter(cond_data, dom_adaptive_plasticity==&quot;True&quot;)), plastic_optimal=nrow(filter(cond_data, dom_optimal_plastic==&quot;True&quot;)), plastic_nonadaptive=nrow(filter(cond_data, is_plastic==TRUE &amp; dom_adaptive_plasticity==&quot;False&quot;)) ) } } observed_plasticity &lt;- pivot_longer( observed_plasticity, cols=c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;, &quot;nonplastic&quot;), names_to=&quot;phenotype&quot;, values_to=&quot;phenotype_cnt&quot; ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 4.4 Evolution of phenotypic plasticity For each experimental condition, do we observe the evolution of phenotypic plasticity? To test for phenotypic plasticity, we culture digital organisms in both environments from the fluctuating condition (including organisms evolved in a constant environment). Any plasticity that we observe from digital organisms evolved under constant conditions is cryptic variation (as these organisms were never exposed to these culturing environments). ggplot(filter(observed_plasticity, phenotype %in% c(&quot;plastic&quot;, &quot;nonplastic&quot;)), aes(x=phenotype, y=phenotype_cnt, fill=phenotype)) + geom_bar( stat=&quot;identity&quot;, position=position_dodge(0.9) ) + geom_text( stat=&quot;identity&quot;, mapping=aes(label=phenotype_cnt), vjust=0.05 ) + scale_fill_brewer(palette=&quot;Accent&quot;) + scale_x_discrete( name=&quot;Phenotype&quot;, limits=c(&quot;plastic&quot;, &quot;nonplastic&quot;), labels=c(&quot;Plastic&quot;, &quot;Non-plastic&quot;) ) + facet_grid(sensors~environment) + theme( legend.position=&quot;none&quot; ) Indeed, we do not observe the evolution of phenotypic plasticity in any replicates in which digital organisms do not have access to sensory instructions. We do observe the evolution of plasticity (not necessarily adaptive plasticity) in both constant and fluctuating environments where sensors are enabled. To what extent is the observed phenotypic plasticity adaptive? ggplot(filter(observed_plasticity, environment==&quot;Fluctuating&quot; &amp; sensors == &quot;Sensors&quot; &amp; phenotype %in% c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;)), aes(x=phenotype, y=phenotype_cnt, fill=phenotype)) + geom_bar( stat=&quot;identity&quot;, position=position_dodge(0.9) ) + geom_text( stat=&quot;identity&quot;, mapping=aes(label=phenotype_cnt), vjust=0.05 ) + scale_fill_brewer(palette=&quot;Accent&quot;) + scale_x_discrete( name=&quot;Phenotype&quot;, limits=c(&quot;plastic&quot;, &quot;plastic_adaptive&quot;, &quot;plastic_optimal&quot;, &quot;plastic_nonadaptive&quot;), labels=c(&quot;Total plastic&quot;, &quot;Adaptive plasticity&quot;, &quot;Optimal plasticity&quot;, &quot;Non-adaptive plasticity&quot;) ) + facet_grid(sensors~environment) + theme( legend.position=&quot;none&quot; ) "],["evolutionary-change.html", "Chapter 5 Evolutionary change 5.1 Overview 5.2 Analysis dependencies 5.3 Setup 5.4 The evolution of phenotypic plasticity 5.5 Average generation 5.6 Coalescence event count 5.7 Phenotypic volatility along the dominant lineage 5.8 Phenotypic fidelity 5.9 Mutation count 5.10 Genotypic fidelity 5.11 Characterizing variation along dominant lineages 5.12 Manuscript figures", " Chapter 5 Evolutionary change The effect of adaptive phenotypic plasticity on evolutionary change. 5.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 alpha &lt;- 0.05 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-02-08-evo-dynamics/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis 5.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(rstatix) library(ggsignif) library(scales) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 5.3 Setup summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # note that this labeler makes assumptions about how we set up our experiment condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) pairwise_comparisons &lt;- list( c(&quot;STATIC&quot;, &quot;NON-PLASTIC&quot;), c(&quot;STATIC&quot;, &quot;PLASTIC&quot;), c(&quot;PLASTIC&quot;, &quot;NON-PLASTIC&quot;) ) p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # *really* inefficient way to identify outliers is_outlier &lt;- function(value, cond, data, column) { cond_data &lt;- filter(data, condition==cond) q1 &lt;- summary(cond_data[,column])[[&quot;1st Qu.&quot;]] q3 &lt;- summary(cond_data[,column])[[&quot;3rd Qu.&quot;]] H &lt;- 1.5 * IQR(cond_data[,column]) return( (value &lt; (q1-H)) || (value &gt; (q3+H)) ) } ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) # Palette cb_palette &lt;- &quot;Paired&quot; # Create a directory to store plots dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) # Define sample mean function samplemean &lt;- function(x, d) { return(mean(x[d])) } 5.4 The evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase-two. summary_data_grouped = dplyr::group_by(summary_data, condition) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + ylab(&quot;Number of replicates transferred to phase two&quot;) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col( position=position_dodge(0.9) ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of plastic replicates&quot;) + ylim(0, 100) + theme( legend.position=&quot;none&quot; ) 5.5 Average generation ggplot(summary_data, aes(x=condition, y=time_average_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + ylab(&quot;average generation&quot;) + theme( legend.position=&quot;none&quot; ) + ggsave(paste0(working_directory, &quot;plots/&quot;, &quot;average-generation.png&quot;)) ## Saving 7 x 5 in image kruskal.test( formula=time_average_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: time_average_generation by condition ## Kruskal-Wallis chi-squared = 177.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$time_average_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$time_average_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.004 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$time_average_generation) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$time_average_generation) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$time_average_generation) ) ) ## [1] &quot;PLASTIC median: 31697.65; STATIC median: 30839.75; NON-PLASTIC median: 41768.65&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=time_average_generation~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=9982&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=2818&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4186&quot; summary_data %&gt;% group_by(condition) %&gt;% summarise(mean=mean(time_average_generation),sd=sd(time_average_generation)) ## # A tibble: 3 x 3 ## condition mean sd ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NON-PLASTIC 41090. 2702. ## 2 PLASTIC 31016. 2615. ## 3 STATIC 30002. 3011. 5.6 Coalescence event count The number of times the most recent common ancestor changes gives us the number of selective sweeps that occur during the experiment. # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(phylo_mrca_changes ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=1) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- log10(stat.test$y.position) * c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$phylo_mrca_changes, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;phylo_mrca_changes&quot;) ) coalescence_events_fig &lt;- ggplot( summary_data, aes(x=condition, y=phylo_mrca_changes,fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order, breaks=condition_order ) + scale_y_continuous( name=&quot;Coalescence event count (log scale)&quot;, trans=pseudo_log_trans(sigma = 1, base = 10), breaks=c(0, 10, 100, 1000, 10000), limits=c(-1, 35000) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=phylo_mrca_changes~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;selective-sweeps.pdf&quot;), width=5, height=5 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position coalescence_events_fig kruskal.test( formula=phylo_mrca_changes~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: phylo_mrca_changes by condition ## Kruskal-Wallis chi-squared = 175.46, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$phylo_mrca_changes, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$phylo_mrca_changes and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$phylo_mrca_changes) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$phylo_mrca_changes) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$phylo_mrca_changes) ) ) ## [1] &quot;PLASTIC median: 45.5; STATIC median: 45; NON-PLASTIC median: 663.5&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=phylo_mrca_changes~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=10000&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=2215&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4200&quot; 5.6.1 Average number of generations between coalescence events # Compute frequency of coalescence events summary_data$generations_per_mrca_change &lt;- summary_data$time_average_generation / summary_data$phylo_mrca_changes # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(generations_per_mrca_change ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$generations_per_mrca_change, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;generations_per_mrca_change&quot;) ) coalescence_events_freq_fig &lt;- ggplot( summary_data, aes(x=condition, y=generations_per_mrca_change, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Avg. generations between coalescence events&quot;, limits=c(0, 2000), breaks=seq(0, 2000, 500) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=generations_per_mrca_change~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;generations-between-selective-sweeps.png&quot;), width=5, height=5 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position coalescence_events_freq_fig kruskal.test( formula=generations_per_mrca_change~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: generations_per_mrca_change by condition ## Kruskal-Wallis chi-squared = 175.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$generations_per_mrca_change, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$generations_per_mrca_change and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$generations_per_mrca_change) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$generations_per_mrca_change) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$generations_per_mrca_change) ) ) ## [1] &quot;PLASTIC median: 685.001780758557; STATIC median: 693.676265008576; NON-PLASTIC median: 62.0184902295191&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=generations_per_mrca_change~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=0&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=2151&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=0&quot; 5.7 Phenotypic volatility along the dominant lineage # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_trait_volatility ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;, step.increase=1) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- log10(stat.test$y.position) * c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_trait_volatility, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_trait_volatility&quot;) ) phenotypic_volatility_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_trait_volatility, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Phenotypic volatility (log scale)&quot;, trans=pseudo_log_trans(sigma = 1, base = 10), breaks=c(0, 10, 100, 1000, 10000), limits=c(-1, 35000) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_trait_volatility~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj&lt;=alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;phenotypic-volatility.pdf&quot;), width=5, height=5 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position phenotypic_volatility_fig kruskal.test( formula=dominant_lineage_trait_volatility~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility by condition ## Kruskal-Wallis chi-squared = 190.78, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 8.7e-07 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility) ) ) ## [1] &quot;PLASTIC median: 2; STATIC median: 0; NON-PLASTIC median: 1868&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_trait_volatility~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=10000&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=3116.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4200&quot; 5.7.1 Phenotypic volatility normalized by generations elapsed summary_data$dominant_lineage_trait_volatility_per_generation &lt;- summary_data$dominant_lineage_trait_volatility / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_volatility_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=dominant_lineage_trait_volatility_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility_per_generation by condition ## Kruskal-Wallis chi-squared = 189.62, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 4.2e-06 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility_per_generation) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility_per_generation) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility_per_generation) ) ) ## [1] &quot;PLASTIC median: 6.33339279717772e-05; STATIC median: 0; NON-PLASTIC median: 0.0447440145638177&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_trait_volatility_per_generation~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=10000&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=3061.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4200&quot; 5.8 Phenotypic fidelity Frequency that an offsprings genotype is identical to a parent genotype (along the dominant lineage). summary_data$dominant_lineage_trait_fidelity &lt;- (summary_data$dominant_generation_born - summary_data$dominant_lineage_trait_volatility) / summary_data$dominant_generation_born # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_trait_fidelity ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=1.5) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position * c(1.0,1.0,1.0005) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_trait_fidelity, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_trait_fidelity&quot;) ) phenotypic_fidelity_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_trait_fidelity, fill=condition) ) + geom_flat_violin( data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Phenotypic fidelity&quot;, limits=c(0.94, 1.013), breaks=c(0.94, 0.96, 0.98, 1.0) #seq(0.94, 1.0, 0.01) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_trait_fidelity~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;phenotypic-fidelity.pdf&quot;), width=5, height=5 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position phenotypic_fidelity_fig kruskal.test( formula=dominant_lineage_trait_fidelity~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_fidelity by condition ## Kruskal-Wallis chi-squared = 189.62, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_fidelity, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_fidelity and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 4.2e-06 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_fidelity) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_fidelity) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_fidelity) ) ) ## [1] &quot;PLASTIC median: 0.999936666072028; STATIC median: 1; NON-PLASTIC median: 0.955255985436182&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_trait_fidelity~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=0&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1138.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=0&quot; 5.9 Mutation count # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_total_mut_cnt ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=1) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- log10(stat.test$y.position) * c(1.0,1.0,1.03) # c(1.0,1.0,1.01) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_total_mut_cnt, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_total_mut_cnt&quot;) ) mutation_count_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_total_mut_cnt, fill=condition) ) + geom_flat_violin( # data=filter(summary_data, !is_outlier), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Mutation count (log scale)&quot;, trans=pseudo_log_trans(sigma = 1, base = 10), breaks=c(0, 10, 100, 1000, 10000), limits=c(-1, 35000) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_total_mut_cnt~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;mutation-accumulation.pdf&quot;), width=5, height=4 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position mutation_count_fig kruskal.test( formula=dominant_lineage_total_mut_cnt~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_total_mut_cnt by condition ## Kruskal-Wallis chi-squared = 179.33, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_total_mut_cnt, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_total_mut_cnt and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.0019 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_total_mut_cnt) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ) ) ## [1] &quot;PLASTIC median: 998.5; STATIC median: 1100; NON-PLASTIC median: 4657.5&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_total_mut_cnt~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=10000&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1336.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4200&quot; 5.9.1 Mutation count normalized by generations elapsed summary_data$mutations_per_generation &lt;- summary_data$dominant_lineage_total_mut_cnt / summary_data$dominant_generation_born ggplot(summary_data, aes(x=condition, y=mutations_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Mutation count / generation&quot;) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=mutations_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: mutations_per_generation by condition ## Kruskal-Wallis chi-squared = 180.11, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$mutations_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$mutations_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 2e-04 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$mutations_per_generation) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$mutations_per_generation) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$mutations_per_generation) ) ) ## [1] &quot;PLASTIC median: 0.0319267181456982; STATIC median: 0.0368157192941933; NON-PLASTIC median: 0.112804526786948&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=mutations_per_generation~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=9987&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1206&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4198&quot; 5.10 Genotypic fidelity The frequency that an offsprings genotype is the same as a parents genotype. summary_data$dominant_lineage_genotypic_fidelity &lt;- (summary_data$dominant_generation_born - summary_data$dominant_lineage_num_mut_steps) / summary_data$dominant_generation_born # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_genotypic_fidelity ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=0.2) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position * c(1.0,1.0,1.0) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) genotypic_fidelity_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_genotypic_fidelity, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Genotypic fidelity&quot;, limits=c(0.85, 1.01), breaks=c(0.85, 0.90, 0.95, 1.0) #seq(0.85, 1.0, 0.02) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_genotypic_fidelity~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/&quot;, &quot;genotypic-fidelity.pdf&quot;), width=5, height=4 ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position genotypic_fidelity_fig kruskal.test( formula=dominant_lineage_genotypic_fidelity~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_genotypic_fidelity by condition ## Kruskal-Wallis chi-squared = 179.86, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_genotypic_fidelity, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_genotypic_fidelity and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 2e-04 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_genotypic_fidelity) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_genotypic_fidelity) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_genotypic_fidelity) ) ) ## [1] &quot;PLASTIC median: 0.969286906891951; STATIC median: 0.964620594632577; NON-PLASTIC median: 0.89754902563783&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_genotypic_fidelity~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=18&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=2992&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=2&quot; 5.11 Characterizing variation along dominant lineages 5.11.1 Mutational instability summary_data$frac_phenotype_changing_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype / summary_data$dominant_lineage_num_mut_steps summary_data$frac_phenotype_stable_mut_steps &lt;- 1 - summary_data$frac_phenotype_changing_mut_steps # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(frac_phenotype_changing_mut_steps ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=0.2) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.0) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) ggplot(summary_data, aes(x=condition, y=frac_phenotype_changing_mut_steps, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Mutational instability&quot;) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=frac_phenotype_changing_mut_steps~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) + ggsave(paste0(working_directory, &quot;plots/&quot;, &quot;frac_phenotype_changing_mutational_steps.png&quot;)) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position ## Saving 7 x 5 in image kruskal.test( formula=frac_phenotype_changing_mut_steps~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: frac_phenotype_changing_mut_steps by condition ## Kruskal-Wallis chi-squared = 191.23, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$frac_phenotype_changing_mut_steps, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$frac_phenotype_changing_mut_steps and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 2.3e-07 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$frac_phenotype_changing_mut_steps) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$frac_phenotype_changing_mut_steps) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$frac_phenotype_changing_mut_steps) ) ) ## [1] &quot;PLASTIC median: 0.00224941742616098; STATIC median: 0; NON-PLASTIC median: 0.437583018324547&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=frac_phenotype_changing_mut_steps~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=10000&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=3172&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=4200&quot; 5.11.2 Mutational stability # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(frac_phenotype_stable_mut_steps ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;,step.increase=0.75) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.0) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_trait_volatility, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_trait_volatility&quot;) ) mutational_stability_fig &lt;- ggplot( summary_data, aes(x=condition, y=frac_phenotype_stable_mut_steps, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;Mutational stability&quot;, limits=c(0.5, 1.15), breaks=c(0.5, 0.75, 1.0) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=frac_phenotype_stable_mut_steps~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position mutational_stability_fig kruskal.test( formula=frac_phenotype_stable_mut_steps~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: frac_phenotype_stable_mut_steps by condition ## Kruskal-Wallis chi-squared = 191.23, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$frac_phenotype_stable_mut_steps, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$frac_phenotype_stable_mut_steps and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 2.3e-07 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$frac_phenotype_stable_mut_steps) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$frac_phenotype_stable_mut_steps) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$frac_phenotype_stable_mut_steps) ) ) ## [1] &quot;PLASTIC median: 0.997750582573839; STATIC median: 1; NON-PLASTIC median: 0.562416981675453&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=frac_phenotype_stable_mut_steps~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=0&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1028&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=0&quot; 5.11.3 For PLASTIC populations, what fraction of phenotype-altering mutations occurred in the unexpressed phenotype? summary_data$frac_unexpressed_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype / summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype summary_data$frac_expressed_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_expressed_phenotype / summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype ggplot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0), aes(x=frac_unexpressed_mut_steps)) + geom_histogram(binwidth=0.1) + scale_x_continuous( limits=c(0, 1.1), breaks=seq(0, 1.0, 0.1) ) + theme( legend.position=&quot;none&quot; ) ## Warning: Removed 2 rows containing missing values (geom_bar). print(paste0(&quot;PLASTIC - Mean with bootstrapped 95% CI&quot;)) ## [1] &quot;PLASTIC - Mean with bootstrapped 95% CI&quot; bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_mut_steps, statistic = samplemean, R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.8247126 -7.011494e-05 0.04018906 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.7443, 0.8994 ) ## Calculations and Intervals on Original Scale plastic_summary_data &lt;- filter(summary_data, condition==&quot;PLASTIC&quot;) aggregate_frac_mut_steps_that_change_unexpressed_phenotype &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype) sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) ## [1] 83 sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_aggregate_phenotype) ## [1] 102 aggregate_frac_mut_steps_that_change_unexpressed_phenotype ## [1] 0.8137255 83 / 102 (0.8137255) 5.11.4 For PLASTIC populations, what fraction of mutations that affect the unexpressed phenotype are deleterious versus beneficial? aggregate_frac_unexpressed_deleterious_mut_steps &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_deleterious) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) aggregate_frac_unexpressed_beneficial_mut_steps &lt;- sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_beneficial) / sum(plastic_summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype) 5.11.4.1 Deleterious mutations summary_data$frac_unexpressed_deleterious_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_deleterious / summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype ggplot( filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype &gt; 0), aes(x=frac_unexpressed_deleterious_mut_steps) ) + geom_density() + theme( legend.position=&quot;none&quot; ) bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_deleterious_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_deleterious_mut_steps, statistic = samplemean, ## R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.5172414 8.528736e-05 0.04008096 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.4402, 0.5954 ) ## Calculations and Intervals on Original Scale 5.11.4.2 Beneficial mutations summary_data$frac_unexpressed_beneficial_mut_steps &lt;- summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype_beneficial / summary_data$dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype ggplot( filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_unexpressed_phenotype &gt; 0), aes(x=frac_unexpressed_beneficial_mut_steps) ) + geom_density() + theme( legend.position=&quot;none&quot; ) bo &lt;- boot(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; 0)$frac_unexpressed_beneficial_mut_steps, statistic=samplemean, R=10000) print(bo) ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = filter(summary_data, condition == &quot;PLASTIC&quot; &amp; dominant_lineage_num_mut_steps_that_change_aggregate_phenotype &gt; ## 0)$frac_unexpressed_beneficial_mut_steps, statistic = samplemean, ## R = 10000) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 0.4827586 0.0001417241 0.0397484 print(boot.ci(bo, conf=0.95, type=&quot;perc&quot;)) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = bo, conf = 0.95, type = &quot;perc&quot;) ## ## Intervals : ## Level Percentile ## 95% ( 0.4034, 0.5598 ) ## Calculations and Intervals on Original Scale 5.12 Manuscript figures Figures styled for the paper. magnitude_grid &lt;- plot_grid( coalescence_events_fig + theme( legend.position=&quot;none&quot;, axis.title.x=element_blank() ) + ggtitle(&quot;Coalescence events count&quot;), mutation_count_fig + theme( legend.position=&quot;none&quot;, axis.title.x=element_blank() ) + ggtitle(&quot;Mutation count&quot;), phenotypic_volatility_fig + theme( legend.position=&quot;none&quot;, axis.title.x=element_blank() ) + ggtitle(&quot;Phenotypic volatility&quot;), nrow=1, ncol=3, align=&quot;v&quot;, labels=&quot;auto&quot; ) magnitude_grid pace_grid &lt;- plot_grid( coalescence_events_freq_fig + theme( legend.position=&quot;none&quot;, axis.title.x=element_blank() ) + ggtitle(&quot;Generations between coalescence events&quot;), mutational_stability_fig + theme( legend.position=&quot;none&quot;, axis.title.x=element_blank() ) + ggtitle(&quot;Mutational stability&quot;), nrow=1, ncol=2, align=&quot;v&quot;, labels=&quot;auto&quot; ) pace_grid save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;evolutionary-change-magnitude-panel.pdf&quot;), magnitude_grid, base_height=6, base_asp=3/1 ) save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;evolutionary-change-pace-panel.pdf&quot;), pace_grid, base_height=6, base_asp=2/1 ) # save_plot( # paste0(working_directory, &quot;plots/&quot;, &quot;evolutionary-change-full-panel.pdf&quot;), # grid, # base_height=12, # base_asp=3/2 # ) "],["evolution-and-maintenance-of-novel-traits.html", "Chapter 6 Evolution and maintenance of novel traits 6.1 Overview 6.2 Analysis dependencies 6.3 Setup 6.4 The evolution of phenotypic plasticity 6.5 Final novel task count (dominant genotype) 6.6 Novel task count (final population) 6.7 Novel task discovery (lineage) 6.8 Novel task discovery (population) 6.9 Novel task discovery frequency (lineage) 6.10 Novel tasks gained (lineage) 6.11 Novel task loss (lineage) 6.12 Frequency of novel task loss (lineage) 6.13 How many instances of novel trait loss co-occurred with changes in base phenotype? 6.14 Manuscript figures 6.15 Combined panel", " Chapter 6 Evolution and maintenance of novel traits The effect of adaptive phenotypic plasticity on the evolution and maintenance of novel tasks. 6.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 alpha &lt;- 0.05 focal_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) extra_traits &lt;- c( &quot;nor&quot;,&quot;xor&quot;,&quot;equals&quot;, &quot;logic_3aa&quot;,&quot;logic_3ab&quot;,&quot;logic_3ac&quot;, &quot;logic_3ad&quot;,&quot;logic_3ae&quot;,&quot;logic_3af&quot;, &quot;logic_3ag&quot;,&quot;logic_3ah&quot;,&quot;logic_3ai&quot;, &quot;logic_3aj&quot;,&quot;logic_3ak&quot;,&quot;logic_3al&quot;, &quot;logic_3am&quot;,&quot;logic_3an&quot;,&quot;logic_3ao&quot;, &quot;logic_3ap&quot;,&quot;logic_3aq&quot;,&quot;logic_3ar&quot;, &quot;logic_3as&quot;,&quot;logic_3at&quot;,&quot;logic_3au&quot;, &quot;logic_3av&quot;,&quot;logic_3aw&quot;,&quot;logic_3ax&quot;, &quot;logic_3ay&quot;,&quot;logic_3az&quot;,&quot;logic_3ba&quot;, &quot;logic_3bb&quot;,&quot;logic_3bc&quot;,&quot;logic_3bd&quot;, &quot;logic_3be&quot;,&quot;logic_3bf&quot;,&quot;logic_3bg&quot;, &quot;logic_3bh&quot;,&quot;logic_3bi&quot;,&quot;logic_3bj&quot;, &quot;logic_3bk&quot;,&quot;logic_3bl&quot;,&quot;logic_3bm&quot;, &quot;logic_3bn&quot;,&quot;logic_3bo&quot;,&quot;logic_3bp&quot;, &quot;logic_3bq&quot;,&quot;logic_3br&quot;,&quot;logic_3bs&quot;, &quot;logic_3bt&quot;,&quot;logic_3bu&quot;,&quot;logic_3bv&quot;, &quot;logic_3bw&quot;,&quot;logic_3bx&quot;,&quot;logic_3by&quot;, &quot;logic_3bz&quot;,&quot;logic_3ca&quot;,&quot;logic_3cb&quot;, &quot;logic_3cc&quot;,&quot;logic_3cd&quot;,&quot;logic_3ce&quot;, &quot;logic_3cf&quot;,&quot;logic_3cg&quot;,&quot;logic_3ch&quot;, &quot;logic_3ci&quot;,&quot;logic_3cj&quot;,&quot;logic_3ck&quot;, &quot;logic_3cl&quot;,&quot;logic_3cm&quot;,&quot;logic_3cn&quot;, &quot;logic_3co&quot;,&quot;logic_3cp&quot; ) # Relative location of data. working_directory &lt;- &quot;experiments/2021-01-31-complex-features/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; 6.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(rstatix) library(ggsignif) library(scales) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 6.3 Setup ####### summary data ####### summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; summary_data$extra_task_value &lt;- as.factor(summary_data$extra_task_value) summary_data &lt;- filter(summary_data, extra_task_value == 0.1) env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) pairwise_comparisons &lt;- list( c(&quot;STATIC&quot;, &quot;NON-PLASTIC&quot;), c(&quot;STATIC&quot;, &quot;PLASTIC&quot;), c(&quot;PLASTIC&quot;, &quot;NON-PLASTIC&quot;) ) p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # *really* inefficient way to identify outliers is_outlier &lt;- function(value, cond, data, column) { cond_data &lt;- filter(data, condition==cond) q1 &lt;- summary(cond_data[,column])[[&quot;1st Qu.&quot;]] q3 &lt;- summary(cond_data[,column])[[&quot;3rd Qu.&quot;]] H &lt;- 1.5 * IQR(cond_data[,column]) return( (value &lt; (q1-H)) || (value &gt; (q3+H)) ) } ###### time series ##### lineage_time_series_data_loc &lt;- paste0(working_directory, &quot;data/lineage_series.csv&quot;) lineage_time_series_data &lt;- read.csv(lineage_time_series_data_loc) lineage_time_series_data$DISABLE_REACTION_SENSORS &lt;- as.factor(lineage_time_series_data$DISABLE_REACTION_SENSORS) lineage_time_series_data$chg_env &lt;- lineage_time_series_data$chg_env == &quot;True&quot; lineage_time_series_data$sensors &lt;- lineage_time_series_data$DISABLE_REACTION_SENSORS == &quot;0&quot; lineage_time_series_data$extra_task_value &lt;- as.factor(lineage_time_series_data$extra_task_value) lineage_time_series_data$env_label &lt;- mapply( env_label_fun, lineage_time_series_data$chg_env ) lineage_time_series_data$sensors_label &lt;- mapply( sensors_label_fun, lineage_time_series_data$sensors ) lineage_time_series_data$condition &lt;- mapply( condition_label_fun, lineage_time_series_data$sensors, lineage_time_series_data$chg_env ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) # Palette cb_palette &lt;- &quot;Paired&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) # Sample mean function samplemean &lt;- function(x, d) { return(mean(x[d])) } 6.4 The evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase two. summary_data_grouped = dplyr::group_by(summary_data, sensors, env_label, condition, extra_task_value) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + ylab(&quot;Number of replicates in phase two&quot;) + facet_wrap(~extra_task_value, labeller=label_both) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic, extra_task_value) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + ylim(0, 100) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of replicates with a plastic dominant genotype&quot;) + facet_wrap(~extra_task_value, labeller=label_both) + theme( legend.position=&quot;none&quot; ) 6.5 Final novel task count (dominant genotype) How many novel tasks do final dominant genotypes perform? # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_extra_tasks ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;) # ,step.increase=1 # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_extra_tasks, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_extra_tasks&quot;) ) final_novel_task_count_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_extra_tasks, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Final novel task count&quot; ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_extra_tasks~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position final_novel_task_count_fig kruskal.test( formula=dominant_extra_tasks~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_extra_tasks by condition ## Kruskal-Wallis chi-squared = 177.17, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_extra_tasks, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_extra_tasks and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.9 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_extra_tasks) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_extra_tasks) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_extra_tasks) ) ) ## [1] &quot;PLASTIC median: 3; STATIC median: 3; NON-PLASTIC median: 0&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_extra_tasks~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=184&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1871&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=64&quot; 6.6 Novel task count (final population) How many novel tasks are performed across the final population (1% of organisms must perform to count)? ggplot(summary_data, aes(x=condition, y=final_pop_extra_tasks_0.01, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=final_pop_extra_tasks_0.01~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: final_pop_extra_tasks_0.01 by condition ## Kruskal-Wallis chi-squared = 169.47, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$final_pop_extra_tasks_0.01, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$final_pop_extra_tasks_0.01 and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 0.00016 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$final_pop_extra_tasks_0.01) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$final_pop_extra_tasks_0.01) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$final_pop_extra_tasks_0.01) ) ) ## [1] &quot;PLASTIC median: 3; STATIC median: 4; NON-PLASTIC median: 0&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=final_pop_extra_tasks_0.01~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=227.5&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1203&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=225.5&quot; 6.7 Novel task discovery (lineage) # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_extra_traits_discovered ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;) # ,step.increase=1 # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_extra_traits_discovered, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_extra_traits_discovered&quot;) ) lineage_novel_task_discovery_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_extra_traits_discovered, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Novel task discovery&quot; ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_extra_traits_discovered~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position lineage_novel_task_discovery_fig kruskal.test( formula=dominant_lineage_extra_traits_discovered~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_discovered by condition ## Kruskal-Wallis chi-squared = 24.099, df = 2, p-value = 5.846e-06 pairwise.wilcox.test( x=summary_data$dominant_lineage_extra_traits_discovered, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_extra_traits_discovered and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.7e-05 - ## STATIC 0.0035 0.0561 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_discovered) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_discovered) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_discovered) ) ) ## [1] &quot;PLASTIC median: 3.5; STATIC median: 4; NON-PLASTIC median: 6&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_extra_traits_discovered~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=6319.5&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1578&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=3110.5&quot; 6.8 Novel task discovery (population) ggplot( summary_data, aes(x=condition, y=discovered_extra_tasks_0.01, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=discovered_extra_tasks_0.01~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: discovered_extra_tasks_0.01 by condition ## Kruskal-Wallis chi-squared = 24.271, df = 2, p-value = 5.365e-06 pairwise.wilcox.test( x=summary_data$discovered_extra_tasks_0.01, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$discovered_extra_tasks_0.01 and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.4e-05 - ## STATIC 0.00035 1.00000 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$discovered_extra_tasks_0.01) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$discovered_extra_tasks_0.01) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$discovered_extra_tasks_0.01) ) ) ## [1] &quot;PLASTIC median: 8; STATIC median: 9; NON-PLASTIC median: 13&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=discovered_extra_tasks_0.01~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=6573.5&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1918.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=3096&quot; 6.9 Novel task discovery frequency (lineage) summary_data$dominant_lineage_extra_traits_discovered_per_generation &lt;- summary_data$dominant_lineage_extra_traits_discovered / summary_data$dominant_generation_born summary_data$dominant_lineage_extra_traits_generations_per_discovery &lt;- summary_data$dominant_generation_born / summary_data$dominant_lineage_extra_traits_discovered # Compute manual labels for geom_signif # stat.test &lt;- filter(summary_data, dominant_lineage_extra_traits_discovered &gt; 0) %&gt;% # wilcox_test(dominant_lineage_extra_traits_generations_per_discovery ~ condition) %&gt;% # adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% # add_significance() %&gt;% # add_xy_position(x=&quot;condition&quot;) # ,step.increase=1 stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_extra_traits_discovered_per_generation ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;, step.increase=0.0001) # ,step.increase=1 # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_extra_traits_discovered_per_generation, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_extra_traits_discovered_per_generation&quot;) ) lineage_novel_task_discovery_freq_fig &lt;- ggplot( # filter(summary_data, dominant_lineage_extra_traits_discovered &gt; 0), summary_data, aes(x=condition, y=dominant_lineage_extra_traits_discovered_per_generation, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Novel task discovery frequency&quot;) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_extra_traits_discovered_per_generation~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position lineage_novel_task_discovery_freq_fig kruskal.test( formula=dominant_lineage_extra_traits_discovered_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_discovered_per_generation by condition ## Kruskal-Wallis chi-squared = 7.1465, df = 2, p-value = 0.02806 pairwise.wilcox.test( x=summary_data$dominant_lineage_extra_traits_discovered_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_extra_traits_discovered_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.092 - ## STATIC 1.000 0.025 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_discovered_per_generation) ) ) ## [1] &quot;PLASTIC median: 0.000117695011124939; STATIC median: 0.00015363220504867; NON-PLASTIC median: 0.00014358046266055&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_extra_traits_discovered_per_generation~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=4751&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1510.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=2584&quot; 6.10 Novel tasks gained (lineage) ggplot( summary_data, aes(x=condition, y=dominant_lineage_extra_traits_gained, fill=condition) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Novel tasks gains along lineage&quot;) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + coord_flip() + facet_wrap( ~extra_task_value, labeller=label_both ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-extra-tasks-gained.pdf&quot;), width=15, height=10 ) 6.11 Novel task loss (lineage) # Compute manual labels for geom_signif stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_extra_traits_lost ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;, step.increase=1) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- log10(stat.test$y.position) * c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_extra_traits_lost, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_extra_traits_lost&quot;) ) lineage_novel_task_loss_fig &lt;- ggplot( summary_data, aes(x=condition, y=dominant_lineage_extra_traits_lost, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Novel task loss (log scale)&quot;, trans=pseudo_log_trans(sigma=1, base=10), breaks=c(0,10,100,1000), limits=c(-1,5000) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_extra_traits_lost~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj&lt;=alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + # coord_flip() theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position lineage_novel_task_loss_fig kruskal.test( formula=dominant_lineage_extra_traits_lost~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_lost by condition ## Kruskal-Wallis chi-squared = 129.06, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_extra_traits_lost, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_extra_traits_lost and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.7e-16 - ## STATIC &lt; 2e-16 0.0024 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ) ) ## [1] &quot;PLASTIC median: 2; STATIC median: 5; NON-PLASTIC median: 87.5&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_extra_traits_lost~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=9105&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1353.5&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=3959&quot; 6.12 Frequency of novel task loss (lineage) summary_data$dominant_lineage_extra_traits_lost_per_generation &lt;- summary_data$dominant_lineage_extra_traits_lost / summary_data$dominant_generation_born summary_data$dominant_lineage_extra_traits_generations_per_loss &lt;- summary_data$dominant_generation_born / summary_data$dominant_lineage_extra_traits_lost # Compute manual labels for geom_signif # stat.test &lt;- filter(summary_data, dominant_lineage_extra_traits_lost &gt; 0) %&gt;% # wilcox_test(dominant_lineage_extra_traits_generations_per_loss ~ condition) %&gt;% # adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% # add_significance() %&gt;% # add_xy_position(x=&quot;condition&quot;, step.increase=1) stat.test &lt;- summary_data %&gt;% wilcox_test(dominant_lineage_extra_traits_lost_per_generation ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;, step.increase=.1) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position #* c(1.0,1.0,1.03) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) summary_data$is_outlier &lt;- mapply( is_outlier, summary_data$dominant_lineage_extra_traits_lost_per_generation, summary_data$condition, MoreArgs=list(data=summary_data, column=&quot;dominant_lineage_extra_traits_lost_per_generation&quot;) ) lineage_novel_task_loss_freq_fig &lt;- ggplot( # filter(summary_data, dominant_lineage_extra_traits_lost &gt; 0), summary_data, aes(x=condition, y=dominant_lineage_extra_traits_lost_per_generation, fill=condition) ) + geom_flat_violin( # data=filter(summary_data,is_outlier==FALSE), scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Novel task loss frequency&quot;) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_extra_traits_lost_per_generation~condition, data=summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj&lt;=alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position lineage_novel_task_loss_freq_fig kruskal.test( formula=dominant_lineage_extra_traits_lost_per_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_extra_traits_lost_per_generation by condition ## Kruskal-Wallis chi-squared = 121.41, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_extra_traits_lost_per_generation, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_extra_traits_lost_per_generation and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.1e-15 - ## STATIC &lt; 2e-16 0.0012 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ), paste0( &quot;STATIC median: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_per_generation) ) ) ## [1] &quot;PLASTIC median: 6.25141973661864e-05; STATIC median: 0.000161396283669756; NON-PLASTIC median: 0.0022026054610079&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=dominant_lineage_extra_traits_lost_per_generation~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=8940&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1311&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=3922&quot; 6.13 How many instances of novel trait loss co-occurred with changes in base phenotype? Task loss linked with primary trait changes. lost_traits_summary_data &lt;- filter(summary_data, extra_task_value==0.1 &amp; dominant_lineage_extra_traits_lost&gt;0) lost_traits_summary_data$frac_linked_extra_trait_loss &lt;- lost_traits_summary_data$dominant_lineage_extra_traits_lost_linked_to_primary_change / lost_traits_summary_data$dominant_lineage_extra_traits_lost ggplot(lost_traits_summary_data, aes(x=condition, y=frac_linked_extra_trait_loss, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=frac_linked_extra_trait_loss~condition, data=lost_traits_summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: frac_linked_extra_trait_loss by condition ## Kruskal-Wallis chi-squared = 153.68, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=lost_traits_summary_data$frac_linked_extra_trait_loss, g=lost_traits_summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, conf.int=TRUE, conf.level=0.95 ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: lost_traits_summary_data$frac_linked_extra_trait_loss and lost_traits_summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.9e-08 - ## STATIC &lt; 2e-16 1.8e-06 ## ## P value adjustment method: bonferroni paste( sep=&quot;; &quot;, paste0( &quot;PLASTIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$frac_linked_extra_trait_loss) ), paste0( &quot;STATIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$frac_linked_extra_trait_loss) ), paste0( &quot;NON-PLASTIC median: &quot;, median(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$frac_linked_extra_trait_loss) ) ) ## [1] &quot;PLASTIC median: 0.0192307692307692; STATIC median: 0; NON-PLASTIC median: 0.983803278688525&quot; print(&quot;Wilcox rank sum test statistics:&quot;) ## [1] &quot;Wilcox rank sum test statistics:&quot; for (pair in pairwise_comparisons) { pair_data &lt;- filter(lost_traits_summary_data, condition %in% pair) pair_data$condition &lt;- as.factor(pair_data$condition) wt &lt;- wilcox.test( formula=frac_linked_extra_trait_loss~condition, data=pair_data, exact=FALSE, paired=FALSE ) print(paste0(pair[1], &quot;&lt;--&gt;&quot;, pair[2], &quot;: W=&quot;,wt$statistic)) } ## [1] &quot;STATIC&lt;--&gt;NON-PLASTIC: W=8344&quot; ## [1] &quot;STATIC&lt;--&gt;PLASTIC: W=1602&quot; ## [1] &quot;PLASTIC&lt;--&gt;NON-PLASTIC: W=2212&quot; sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 10998 sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 11229 aggregate_frac_linked_extra_trait_loss_nonplastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_nonplastic ## [1] 0.9794283 sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 29 sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 142 aggregate_frac_linked_extra_trait_loss_plastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_plastic ## [1] 0.2042254 sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) ## [1] 13 sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) ## [1] 631 aggregate_frac_linked_extra_trait_loss_nonplastic &lt;- sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost_linked_to_primary_change) / sum(filter(lost_traits_summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_extra_traits_lost) aggregate_frac_linked_extra_trait_loss_nonplastic ## [1] 0.02060222 6.14 Manuscript figures 6.15 Combined panel # grid &lt;- plot_grid( # final_novel_task_count_fig + # theme( # axis.title.x=element_blank() # ) + # ggtitle(&quot;Final novel task count&quot;), # lineage_novel_task_discovery_fig + # theme( # axis.title.x=element_blank() # ) + # ggtitle(&quot;Novel task discovery&quot;), # lineage_novel_task_loss_fig + # theme( # axis.title.x=element_blank() # ) + # ggtitle(&quot;Novel task loss&quot;), # NULL, # lineage_novel_task_discovery_freq_fig + # theme( # axis.title.x=element_blank() # ) + # ggtitle(&quot;Novel task discovery frequency&quot;), # lineage_novel_task_loss_freq_fig + # theme( # axis.title.x=element_blank() # ) + # ggtitle(&quot;Novel task loss frequency&quot;), # nrow=2, # align=&quot;v&quot;, # # labels=&quot;auto&quot; # labels=c(&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;&quot;, &quot;d&quot;,&quot;e&quot;) # ) magnitude_grid &lt;- plot_grid( final_novel_task_count_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Final novel task count&quot;), lineage_novel_task_discovery_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Novel task discovery&quot;), lineage_novel_task_loss_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Novel task loss&quot;), nrow=1, align=&quot;v&quot;, labels=&quot;auto&quot; ) magnitude_grid pace_grid &lt;- plot_grid( lineage_novel_task_discovery_freq_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Novel task discovery frequency&quot;), lineage_novel_task_loss_freq_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Novel task loss frequency&quot;), nrow=1, align=&quot;v&quot;, labels=&quot;auto&quot; ) pace_grid save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;complex-traits-magnitude-panel.pdf&quot;), magnitude_grid, base_height=6, base_asp=3/1 ) save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;complex-traits-pace-panel.pdf&quot;), pace_grid, base_height=6, base_asp=2/1 ) # save_plot( # paste0(working_directory, &quot;plots/&quot;, &quot;complex-traits-panel.pdf&quot;), # grid, # base_height=12, # base_asp=3/2 # ) grid ## function (nx = NULL, ny = nx, col = &quot;lightgray&quot;, lty = &quot;dotted&quot;, ## lwd = par(&quot;lwd&quot;), equilogs = TRUE) ## { ## if (is.null(nx) || (!is.na(nx) &amp;&amp; nx &gt;= 1)) { ## log &lt;- par(&quot;xlog&quot;) ## if (is.null(nx)) { ## ax &lt;- par(&quot;xaxp&quot;) ## if (log &amp;&amp; equilogs &amp;&amp; ax[3L] &gt; 0) ## ax[3L] &lt;- 1 ## at &lt;- axTicks(1, axp = ax, log = log) ## } ## else { ## U &lt;- par(&quot;usr&quot;) ## at &lt;- seq.int(U[1L], U[2L], length.out = nx + 1) ## at &lt;- (if (log) ## 10^at ## else at)[-c(1, nx + 1)] ## } ## abline(v = at, col = col, lty = lty, lwd = lwd) ## } ## if (is.null(ny) || (!is.na(ny) &amp;&amp; ny &gt;= 1)) { ## log &lt;- par(&quot;ylog&quot;) ## if (is.null(ny)) { ## ax &lt;- par(&quot;yaxp&quot;) ## if (log &amp;&amp; equilogs &amp;&amp; ax[3L] &gt; 0) ## ax[3L] &lt;- 1 ## at &lt;- axTicks(2, axp = ax, log = log) ## } ## else { ## U &lt;- par(&quot;usr&quot;) ## at &lt;- seq.int(U[3L], U[4L], length.out = ny + 1) ## at &lt;- (if (log) ## 10^at ## else at)[-c(1, ny + 1)] ## } ## abline(h = at, col = col, lty = lty, lwd = lwd) ## } ## } ## &lt;bytecode: 0x56144c8aa660&gt; ## &lt;environment: namespace:graphics&gt; "],["accumulation-of-deleterious-instructions.html", "Chapter 7 Accumulation of deleterious instructions 7.1 Overview 7.2 Analysis dependencies 7.3 Setup 7.4 Evolution of phenotypic plasticity 7.5 Poison instruction execution 7.6 Characterizing mutations that increase poison instruction execution 7.7 What fraction of poison execution increases occur in unexpressed phenotype (as cryptic variation)? 7.8 Manuscript figures", " Chapter 7 Accumulation of deleterious instructions The effect of adaptive phenotypic plasticity on the accumulation of deleterious genes. 7.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 alpha &lt;- 0.05 focal_poison_penalty &lt;- 0.1 focal_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-02-05-hitchhiking/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; 7.2 Analysis dependencies Load all required R libraries. library(RColorBrewer) library(ggplot2) library(rstatix) library(ggsignif) library(scales) library(tidyverse) library(cowplot) library(Hmisc) library(boot) library(fmsb) library(knitr) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 7.3 Setup ####### summary data ####### summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; summary_data$POISON_PENALTY &lt;- as.factor(summary_data$POISON_PENALTY) summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases / summary_data$dominant_generation_born summary_data$frac_hitchhiking_linked_trait_change &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases summary_data$frac_unexpressed_hitchhiker_inc &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_in_unexpressed_phenotype / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases summary_data$frac_expressed_hitchiker_inc &lt;- summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_in_expressed_phenotype / summary_data$dominant_lineage_num_times_hitchhike_inst_exec_increases env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) pairwise_comparisons &lt;- list( c(&quot;STATIC&quot;, &quot;NON-PLASTIC&quot;), c(&quot;STATIC&quot;, &quot;PLASTIC&quot;), c(&quot;PLASTIC&quot;, &quot;NON-PLASTIC&quot;) ) p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } poison_penalties &lt;- levels(summary_data$POISON_PENALTY) ###### time series ##### lineage_time_series_data_loc &lt;- paste0(working_directory, &quot;data/lineage_series.csv&quot;) lineage_time_series_data &lt;- read.csv(lineage_time_series_data_loc) lineage_time_series_data$DISABLE_REACTION_SENSORS &lt;- as.factor(lineage_time_series_data$DISABLE_REACTION_SENSORS) lineage_time_series_data$chg_env &lt;- lineage_time_series_data$chg_env == &quot;True&quot; lineage_time_series_data$sensors &lt;- lineage_time_series_data$DISABLE_REACTION_SENSORS == &quot;0&quot; lineage_time_series_data$POISON_PENALTY &lt;- as.factor(lineage_time_series_data$POISON_VALUE) lineage_time_series_data$env_label &lt;- mapply( env_label_fun, lineage_time_series_data$chg_env ) lineage_time_series_data$sensors_label &lt;- mapply( sensors_label_fun, lineage_time_series_data$sensors ) lineage_time_series_data$condition &lt;- mapply( condition_label_fun, lineage_time_series_data$sensors, lineage_time_series_data$chg_env ) ####### misc ####### # Configure our default graphing theme focal_summary_data &lt;- filter(summary_data, POISON_PENALTY==focal_poison_penalty) theme_set(theme_cowplot()) cb_palette &lt;- &quot;Paired&quot; dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) samplemean &lt;- function(x, d) { return(mean(x[d])) } 7.4 Evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase-two. summary_data_grouped = dplyr::group_by(summary_data, sensors, env_label, condition, POISON_PENALTY) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + ylab(&quot;Number of replicates in phase two&quot;) + facet_wrap(~POISON_PENALTY, labeller=label_both) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic, POISON_PENALTY) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ## `summarise()` has grouped output by &#39;condition&#39;, &#39;is_plastic&#39;. You can override using the `.groups` argument. ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + geom_text(aes(label=n, y=n+1)) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + ylab(&quot;Number of replicates with a plastic dominant genotype&quot;) + ylim(0, 100) + facet_wrap(~POISON_PENALTY, labeller=label_both) + theme( legend.position=&quot;none&quot; ) 7.5 Poison instruction execution 7.5.1 Number of replicates where final dominant genotype executes the poison instruction for (penalty in poison_penalties) { occurrences &lt;- c( length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;NON-PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;PLASTIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;STATIC&quot; &amp; dominant_times_poison_executed &gt; 0)$RANDOM_SEED) ) trials &lt;- c( length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;NON-PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;PLASTIC&quot;)$RANDOM_SEED), length(filter(summary_data, POISON_PENALTY==penalty &amp; condition==&quot;STATIC&quot; )$RANDOM_SEED) ) names(trials) &lt;- c( &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot;, &quot;STATIC&quot; ) names(occurrences) &lt;- c( &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot;, &quot;STATIC&quot; ) poison_exec_table &lt;- data.frame( executes.poison=occurrences, replicates=trials ) cat(paste0(&quot;#### Penalty: &quot;, penalty, &quot;\\n&quot;)) cat(print(kable(poison_exec_table))) cat(&quot;\\n&quot;) ft &lt;- pairwise.fisher.test(x=occurrences, n=trials, p.adjust.method=&quot;bonferroni&quot;) print(ft) cat(&quot;\\n\\n&quot;) } ## #### Penalty: 0 ## ## ## | | executes.poison| replicates| ## |:-----------|---------------:|----------:| ## |NON-PLASTIC | 86| 100| ## |PLASTIC | 27| 41| ## |STATIC | 85| 100| ## ## ## Pairwise comparisons using Pairwise comparison of proportions (Fisher) ## ## data: occurrences out of trials ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.03 - ## STATIC 1.00 0.06 ## ## P value adjustment method: bonferroni ## ## ## #### Penalty: 0.03 ## ## ## | | executes.poison| replicates| ## |:-----------|---------------:|----------:| ## |NON-PLASTIC | 46| 100| ## |PLASTIC | 1| 42| ## |STATIC | 1| 100| ## ## ## Pairwise comparisons using Pairwise comparison of proportions (Fisher) ## ## data: occurrences out of trials ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.2e-07 - ## STATIC 2.9e-15 1 ## ## P value adjustment method: bonferroni ## ## ## #### Penalty: 0.1 ## ## ## | | executes.poison| replicates| ## |:-----------|---------------:|----------:| ## |NON-PLASTIC | 14| 100| ## |PLASTIC | 0| 43| ## |STATIC | 0| 100| ## ## ## Pairwise comparisons using Pairwise comparison of proportions (Fisher) ## ## data: occurrences out of trials ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.03212 - ## STATIC 0.00022 1.00000 ## ## P value adjustment method: bonferroni ## ## ## #### Penalty: 0.3 ## ## ## | | executes.poison| replicates| ## |:-----------|---------------:|----------:| ## |NON-PLASTIC | 0| 100| ## |PLASTIC | 0| 44| ## |STATIC | 0| 100| ## ## ## Pairwise comparisons using Pairwise comparison of proportions (Fisher) ## ## data: occurrences out of trials ## ## NON-PLASTIC PLASTIC ## PLASTIC 1 - ## STATIC 1 1 ## ## P value adjustment method: bonferroni 7.5.2 Poison instruction execution (final population) ggplot(summary_data, aes(x=condition, y=final_population_poison, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;poison instruction executions (final population)&quot;, trans=pseudo_log_trans(sigma=1,base=10), breaks=c(0,100,10000,1000000), limits=c(-1,1000000) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + facet_wrap( ~POISON_PENALTY, labeller=label_both ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-population-poison-log.pdf&quot;), width=15, height=10 ) for (penalty in poison_penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=final_population_poison~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$final_population_poison, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 43.589, df = 2, p-value = 3.426e-10 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 8.7e-07 - ## STATIC 9.8e-07 0.00074 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 20.74, df = 2, p-value = 3.136e-05 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.003 - ## STATIC 1e-04 1.000 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 20.608, df = 2, p-value = 3.35e-05 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$final_population_poison and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.0093 - ## STATIC 4.9e-05 1.0000 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: final_population_poison by condition ## Kruskal-Wallis chi-squared = 3.3994, df = 2, p-value = 0.1827 7.5.3 Cummulative poison instruction execution along final dominant lineages ggplot(summary_data, aes(x=condition, y=dominant_lineage_times_poison_executed, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;poison instruction executions (dominant lineage)&quot;, trans=pseudo_log_trans(sigma = 1, base = 10), breaks=c(10,1000,100000), limits=c(-1,100000) ) + facet_wrap( ~POISON_PENALTY, labeller=label_both ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-dominant-lineage-poison-log.pdf&quot;), width=15, height=10 ) for (penalty in poison_penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_times_poison_executed~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_times_poison_executed, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 178.84, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.0018 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 178.62, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.011 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 184.83, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.21 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_times_poison_executed by condition ## Kruskal-Wallis chi-squared = 149.48, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_times_poison_executed and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 4.4e-16 - ## STATIC &lt; 2e-16 0.84 ## ## P value adjustment method: bonferroni 7.6 Characterizing mutations that increase poison instruction execution 7.6.1 Number of offspring along dominant lineage with increase in poison instruction execution ggplot(summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + facet_wrap( ~POISON_PENALTY, labeller=label_both ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) for (penalty in poison_penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_num_times_hitchhike_inst_exec_increases~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 179.79, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 0.00046 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 179.35, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.03 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 185.34, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.27 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases by condition ## Kruskal-Wallis chi-squared = 146.35, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 7.8e-16 - ## STATIC &lt; 2e-16 0.86 ## ## P value adjustment method: bonferroni # sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) # sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) # sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) Focal figure for the manuscript: # Compute manual labels for geom_signif stat.test &lt;- focal_summary_data %&gt;% wilcox_test(dominant_lineage_num_times_hitchhike_inst_exec_increases ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position stat.test$label &lt;- mapply(p_label,stat.test$p.adj) poison_increases_fig &lt;- ggplot( focal_summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases, fill=condition) ) + geom_flat_violin( scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Poisonous task acquisition count&quot;, ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_num_times_hitchhike_inst_exec_increases~condition, data=focal_summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position poison_increases_fig 7.6.2 Frequency of increases in poison instruction execution (lineage) ggplot(summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/final-dominant-lineage-poison-increase-per-generation.png&quot;), width=15, height=10 ) for (penalty in poison_penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot; ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 180.05, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 7.8e-05 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 176.25, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.019 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 184.17, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.2 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation by condition ## Kruskal-Wallis chi-squared = 140.99, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.2e-15 - ## STATIC &lt; 2e-16 0.79 ## ## P value adjustment method: bonferroni Figure for the manuscript: # Compute manual labels for geom_signif stat.test &lt;- focal_summary_data %&gt;% wilcox_test(dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation ~ condition) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;, step.increase=0.2) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position stat.test$label &lt;- mapply(p_label,stat.test$p.adj) poison_increases_per_gen_fig &lt;- ggplot( focal_summary_data, aes(x=condition, y=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation, fill=condition) ) + geom_flat_violin( scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Poisonous task acquisition frequency&quot;, ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + # coord_flip() labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=dominant_lineage_num_times_hitchhike_inst_exec_increases_per_generation~condition, data=focal_summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position poison_increases_per_gen_fig 7.6.3 What fraction of mutations that increase poison instruction execution co-occur with base trait changes? ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0), aes(x=frac_hitchhiking_linked_trait_change, fill=condition)) + geom_density() + facet_grid( condition~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) + ggsave( paste0(working_directory, &quot;plots/dominant-lineage-frac_hitchhiking_linked_trait_change.png&quot;), width=15, height=10 ) ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 ), aes(x=condition, y=frac_hitchhiking_linked_trait_change, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + facet_wrap( ~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + # coord_flip() + theme( legend.position=&quot;none&quot; ) for (penalty in poison_penalties) { stat_data &lt;- filter(summary_data, POISON_PENALTY==penalty &amp; dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0) print( paste0( &quot;PENALTY: &quot;, penalty ) ) kt &lt;- kruskal.test( formula=frac_hitchhiking_linked_trait_change~condition, data=stat_data ) print( kt ) if (is.na(kt$p.value)) { next } if (kt$p.value &gt; 0.05) { next } print( pairwise.wilcox.test( x=stat_data$frac_hitchhiking_linked_trait_change, g=stat_data$condition, p.adjust.method=&quot;bonferroni&quot;, exact=FALSE ) ) } ## [1] &quot;PENALTY: 0&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 211.29, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.031 ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.03&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 186.88, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 2.9e-16 - ## STATIC &lt; 2e-16 - ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.1&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 113.72, df = 2, p-value &lt; 2.2e-16 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 3.3e-08 - ## STATIC &lt; 2e-16 - ## ## P value adjustment method: bonferroni ## [1] &quot;PENALTY: 0.3&quot; ## ## Kruskal-Wallis rank sum test ## ## data: frac_hitchhiking_linked_trait_change by condition ## Kruskal-Wallis chi-squared = 34.791, df = 2, p-value = 2.788e-08 ## ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: stat_data$frac_hitchhiking_linked_trait_change and stat_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 0.26 - ## STATIC 2.4e-08 0.18 ## ## P value adjustment method: bonferroni denom &lt;- sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;NON-PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;NON-PLASTIC (0.1 penalty): &quot;, num/denom, &quot;(&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;NON-PLASTIC (0.1 penalty): 0.498956158663883(956/1916)&quot; denom &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;PLASTIC (0.1 penalty): &quot;, num/denom, &quot; (&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;PLASTIC (0.1 penalty): 0 (0/18)&quot; denom &lt;- sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;STATIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_with_primary_trait_change) paste0(&quot;STATIC (0.1 penalty): &quot;, num/denom, &quot; (&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;STATIC (0.1 penalty): 0 (0/58)&quot; Focal figure for the manuscript: # Compute manual labels for geom_signif stat.test &lt;-filter(focal_summary_data,dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0) %&gt;% wilcox_test(frac_hitchhiking_linked_trait_change ~ condition, comparisons=list(c(&quot;PLASTIC&quot;, &quot;NON-PLASTIC&quot;), c(&quot;STATIC&quot;, &quot;NON-PLASTIC&quot;))) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;condition&quot;) # Tweak y.position manually to account for scaled axis (edge case that triggers bad behavior in geom_signif) stat.test$manual_position &lt;- stat.test$y.position stat.test$label &lt;- mapply(p_label,stat.test$p.adj) linked_trait_change_fig &lt;- ggplot( filter(focal_summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0), aes(x=condition, y=frac_hitchhiking_linked_trait_change, fill=condition) ) + geom_flat_violin( scale=&quot;width&quot;, position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order, labels=condition_order ) + scale_y_continuous( name=&quot;Fraction of linked poisonous task acquisition&quot;, limits=c(-0.01, 1.2), breaks=c(0, 0.25, 0.50, 0.75, 1.0) ) + scale_fill_brewer( palette=cb_palette ) + scale_color_brewer( palette=cb_palette ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label(signif(kruskal.test(formula=frac_hitchhiking_linked_trait_change~condition, data=focal_summary_data)$p.value,digits=4)) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes(xmin=group1,xmax=group2,annotations=label,y_position=manual_position), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position linked_trait_change_fig 7.7 What fraction of poison execution increases occur in unexpressed phenotype (as cryptic variation)? ggplot(filter(summary_data, dominant_lineage_num_times_hitchhike_inst_exec_increases&gt;0 &amp; condition==&quot;PLASTIC&quot;), aes(x=frac_unexpressed_hitchhiker_inc)) + geom_density() + facet_grid( condition~POISON_PENALTY, labeller=label_both, scales=&quot;free_y&quot; ) + theme( legend.position=&quot;none&quot; ) denom &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases) num &lt;- sum(filter(summary_data, condition==&quot;PLASTIC&quot; &amp; POISON_PENALTY==0.1)$dominant_lineage_num_times_hitchhike_inst_exec_increases_in_unexpressed_phenotype) paste0(&quot;PLASTIC: &quot;, num/denom, &quot; (&quot;, num, &quot;/&quot;, denom, &quot;)&quot;) ## [1] &quot;PLASTIC: 0.0555555555555556 (1/18)&quot; 7.8 Manuscript figures grid &lt;- plot_grid( poison_increases_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Poisonous task acquisition count&quot;), poison_increases_per_gen_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Poisonous task acquisition frequency&quot;), linked_trait_change_fig + theme( axis.title.x=element_blank() ) + ggtitle(&quot;Linked poisonous task acquisition&quot;), nrow=1, align=&quot;v&quot;, labels=&quot;auto&quot; ) save_plot( paste0(working_directory, &quot;plots/&quot;, &quot;poison-accumulation-panel.pdf&quot;), grid, base_height=6, base_asp=3/1 ) grid "],["regulation-in-avida.html", "Chapter 8 Regulation in Avida 8.1 Overview 8.2 Analysis dependencies 8.3 Setup 8.4 How many instructions do plastic genomes toggle depending on environmental context? 8.5 What is the distrubution of toggled sequence sizes?", " Chapter 8 Regulation in Avida 8.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-02-08-evo-dynamics/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis 8.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 8.3 Setup trace_summary_data_loc &lt;- paste0(working_directory, &quot;data/trace_summary.csv&quot;) trace_summary_data &lt;- read.csv(trace_summary_data_loc, na.strings=&quot;NONE&quot;) trace_summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(trace_summary_data$DISABLE_REACTION_SENSORS) trace_summary_data$chg_env &lt;- trace_summary_data$chg_env == &quot;True&quot; trace_summary_data$sensors &lt;- trace_summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # note that this labeler makes assumptions about how we set up our experiment condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } trace_summary_data$env_label &lt;- mapply( env_label_fun, trace_summary_data$chg_env ) trace_summary_data$sensors_label &lt;- mapply( sensors_label_fun, trace_summary_data$sensors ) trace_summary_data$condition &lt;- mapply( condition_label_fun, trace_summary_data$sensors, trace_summary_data$chg_env ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) 8.4 How many instructions do plastic genomes toggle depending on environmental context? ggplot(trace_summary_data, aes(x=dominant_num_toggled_sites)) + geom_histogram( binwidth=1, color=&quot;black&quot; ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + scale_x_continuous( breaks=seq(0, max(trace_summary_data$dominant_num_toggled_sites)+1) ) + theme( legend.position=&quot;none&quot; ) + ggsave(paste0(working_directory, &quot;plots/&quot;, &quot;toggled-sites.png&quot;)) ## Saving 7 x 5 in image 8.5 What is the distrubution of toggled sequence sizes? chunk_sizes &lt;- data.frame( size=integer() ) for (sizes in trace_summary_data$dominant_toggled_chunk_sizes) { if (sizes == &quot;&quot;) { next } sizes &lt;- unlist(lapply(str_split(sizes, &#39;;&#39;), as.integer)) chunk_sizes &lt;- rbind(chunk_sizes, data.frame(size=c(sizes))) } ggplot(chunk_sizes, aes(x=size)) + geom_histogram( binwidth=1, color=&quot;black&quot; ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + scale_x_continuous( name=&quot;toggled sequence size&quot;, breaks=seq(0, 10), limits=c(0, 10) ) + theme( legend.position=&quot;none&quot; ) + ggsave(paste0(working_directory, &quot;plots/&quot;, &quot;toggled-chunk-sizes.png&quot;)) ## Saving 7 x 5 in image ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). "],["evolutionary-change-variable-length-genomes.html", "Chapter 9 Evolutionary change (variable length genomes) 9.1 Overview 9.2 Analysis dependencies 9.3 Setup 9.4 Evolution of phenotypic plasticity 9.5 Genome length 9.6 Average generation 9.7 Coalescence events 9.8 Phenotypic volatility along the dominant lineage 9.9 Mutation accumulation along the dominant lineage", " Chapter 9 Evolutionary change (variable length genomes) 9.1 Overview total_updates &lt;- 200000 replicates &lt;- 100 all_traits &lt;- c(&quot;not&quot;,&quot;nand&quot;,&quot;and&quot;,&quot;ornot&quot;,&quot;or&quot;,&quot;andnot&quot;) traits_set_a &lt;- c(&quot;not&quot;, &quot;and&quot;, &quot;or&quot;) traits_set_b &lt;- c(&quot;nand&quot;, &quot;ornot&quot;, &quot;andnot&quot;) # Relative location of data. working_directory &lt;- &quot;experiments/2021-01-30-evo-dynamics/analysis/&quot; # &lt;&lt; For bookdown # working_directory &lt;- &quot;./&quot; # &lt;&lt; For local analysis 9.2 Analysis dependencies Load all required R libraries. library(ggplot2) library(tidyverse) library(cowplot) library(RColorBrewer) library(Hmisc) library(boot) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted/knitted with the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 9.3 Setup summary_data_loc &lt;- paste0(working_directory, &quot;data/aggregate.csv&quot;) summary_data &lt;- read.csv(summary_data_loc, na.strings=&quot;NONE&quot;) summary_data$DISABLE_REACTION_SENSORS &lt;- as.factor(summary_data$DISABLE_REACTION_SENSORS) summary_data$chg_env &lt;- summary_data$chg_env == &quot;True&quot; summary_data$dominant_plastic_odd_even &lt;- as.factor(summary_data$dominant_plastic_odd_even) summary_data$sensors &lt;- summary_data$DISABLE_REACTION_SENSORS == &quot;0&quot; summary_data$is_plastic &lt;- summary_data$dominant_plastic_odd_even == &quot;True&quot; env_label_fun &lt;- function(chg_env) { if (chg_env) { return(&quot;Fluctuating&quot;) } else { return(&quot;Constant&quot;) } } sensors_label_fun &lt;- function(has_sensors) { if (has_sensors) { return(&quot;Sensors&quot;) } else { return(&quot;No sensors&quot;) } } # note that this labeler makes assumptions about how we set up our experiment condition_label_fun &lt;- function(has_sensors, env_chg) { if (has_sensors &amp;&amp; env_chg) { return(&quot;PLASTIC&quot;) } else if (env_chg) { return(&quot;NON-PLASTIC&quot;) } else { return(&quot;STATIC&quot;) } } summary_data$env_label &lt;- mapply( env_label_fun, summary_data$chg_env ) summary_data$sensors_label &lt;- mapply( sensors_label_fun, summary_data$sensors ) summary_data$condition &lt;- mapply( condition_label_fun, summary_data$sensors, summary_data$chg_env ) condition_order = c( &quot;STATIC&quot;, &quot;NON-PLASTIC&quot;, &quot;PLASTIC&quot; ) ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) dir.create(paste0(working_directory, &quot;plots&quot;), showWarnings=FALSE) 9.4 Evolution of phenotypic plasticity For sensor-enabled populations in fluctuating environments, we only transfered populations containing an optimally plastic genotype to phase-two. summary_data_grouped = dplyr::group_by(summary_data, sensors, env_label, condition) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ## `summarise()` has grouped output by &#39;sensors&#39;, &#39;env_label&#39;. You can override using the `.groups` argument. ggplot(summary_data_group_counts, aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + geom_text(aes(label=n, y=n+2)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + ylab(&quot;Number of replicates in phase two&quot;) + theme( legend.position=&quot;none&quot; ) We can confirm our expectation that the dominant genotypes in non-plastic conditions are not phenotypically plastic. summary_data_grouped = dplyr::group_by(summary_data, condition, is_plastic) summary_data_group_counts = dplyr::summarize(summary_data_grouped, n=dplyr::n()) ggplot(filter(summary_data_group_counts, is_plastic), aes(x=condition, y=n, fill=condition)) + geom_col(position=position_dodge(0.9)) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + geom_text(aes(label=n, y=n+1)) + ylab(&quot;Number of replicates with a plastic dominant genotype&quot;) + theme( legend.position=&quot;none&quot; ) 9.5 Genome length Single-instruction insertions and deletions were possible for this experiment, so genome size also evolved. ggplot(summary_data, aes(x=condition, y=dominant_genome_length, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + ylab(&quot;Genome length&quot;) + theme( legend.position=&quot;none&quot; ) kruskal.test( formula=dominant_genome_length~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_genome_length by condition ## Kruskal-Wallis chi-squared = 82.798, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_genome_length, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_genome_length and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC 1.8e-10 - ## STATIC &lt; 2e-16 1 ## ## P value adjustment method: bonferroni median(filter(summary_data, condition==&quot;PLASTIC&quot;)$phylo_mrca_changes) ## [1] 45 median(filter(summary_data, condition==&quot;STATIC&quot;)$phylo_mrca_changes) ## [1] 47 median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$phylo_mrca_changes) ## [1] 393 9.6 Average generation ggplot(summary_data, aes(x=condition, y=time_average_generation, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + ylab(&quot;average generation&quot;) + theme( legend.position=&quot;none&quot; ) median(filter(summary_data, condition==&quot;PLASTIC&quot;)$time_average_generation) ## [1] 31028.6 median(filter(summary_data, condition==&quot;STATIC&quot;)$time_average_generation) ## [1] 31147.5 median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$time_average_generation) ## [1] 30817.95 kruskal.test( formula=time_average_generation~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: time_average_generation by condition ## Kruskal-Wallis chi-squared = 1.3804, df = 2, p-value = 0.5015 9.7 Coalescence events The number of times the most recent common ancestor changes gives us the number of selective sweeps that occur during the experiment. ggplot(summary_data, aes(x=condition, y=phylo_mrca_changes, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + ylab(&quot;Number of selective sweeps&quot;) + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;PLASTIC: 45&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;STATIC: 47&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$phylo_mrca_changes) ) ## [1] &quot;NON-PLASTIC: 393&quot; kruskal.test( formula=phylo_mrca_changes~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: phylo_mrca_changes by condition ## Kruskal-Wallis chi-squared = 168.89, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$phylo_mrca_changes, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$phylo_mrca_changes and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni 9.7.1 Average number of generations between selective sweeps summary_data$generations_per_mrca_change &lt;- summary_data$time_average_generation / summary_data$phylo_mrca_changes ggplot(summary_data, aes(x=condition, y=generations_per_mrca_change, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;PLASTIC: 695.504761904762&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;STATIC: 668.25523255814&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$generations_per_mrca_change) ) ## [1] &quot;NON-PLASTIC: 81.9208459944751&quot; kruskal.test( formula=generations_per_mrca_change~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: generations_per_mrca_change by condition ## Kruskal-Wallis chi-squared = 171.73, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$generations_per_mrca_change, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$generations_per_mrca_change and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 1 ## ## P value adjustment method: bonferroni 9.8 Phenotypic volatility along the dominant lineage ggplot(summary_data, aes(x=condition, y=dominant_lineage_trait_volatility, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_y_continuous( name=&quot;Phenotypic volatility (log scale)&quot;, trans=&quot;pseudo_log&quot;, breaks=c(0, 10, 100, 1000, 10000), limits=c(-1,10000) ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;PLASTIC: 2&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;STATIC: 0&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_trait_volatility) ) ## [1] &quot;NON-PLASTIC: 1580&quot; kruskal.test( formula=dominant_lineage_trait_volatility~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_trait_volatility by condition ## Kruskal-Wallis chi-squared = 191.98, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_trait_volatility, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_trait_volatility and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt; 2e-16 - ## STATIC &lt; 2e-16 5.2e-08 ## ## P value adjustment method: bonferroni 9.9 Mutation accumulation along the dominant lineage ggplot(summary_data, aes(x=condition, y=dominant_lineage_total_mut_cnt, fill=condition)) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8 ) + geom_point( mapping=aes(color=condition), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + ylab(&quot;Mutation accumulation&quot;) + scale_x_discrete( name=&quot;Condition&quot;, limits=condition_order ) + scale_fill_brewer( palette=&quot;Paired&quot; ) + scale_color_brewer( palette=&quot;Paired&quot; ) + coord_flip() + theme( legend.position=&quot;none&quot; ) paste0( &quot;PLASTIC: &quot;, median(filter(summary_data, condition==&quot;PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;PLASTIC: 1552&quot; paste0( &quot;STATIC: &quot;, median(filter(summary_data, condition==&quot;STATIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;STATIC: 1724.5&quot; paste0( &quot;NON-PLASTIC: &quot;, median(filter(summary_data, condition==&quot;NON-PLASTIC&quot;)$dominant_lineage_total_mut_cnt) ) ## [1] &quot;NON-PLASTIC: 12123&quot; kruskal.test( formula=dominant_lineage_total_mut_cnt~condition, data=summary_data ) ## ## Kruskal-Wallis rank sum test ## ## data: dominant_lineage_total_mut_cnt by condition ## Kruskal-Wallis chi-squared = 174.38, df = 2, p-value &lt; 2.2e-16 pairwise.wilcox.test( x=summary_data$dominant_lineage_total_mut_cnt, g=summary_data$condition, p.adjust.method=&quot;bonferroni&quot;, ) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: summary_data$dominant_lineage_total_mut_cnt and summary_data$condition ## ## NON-PLASTIC PLASTIC ## PLASTIC &lt;2e-16 - ## STATIC &lt;2e-16 0.57 ## ## P value adjustment method: bonferroni "],["references.html", "References", " References "]]
